// ChildViewYamahaTX816.cpp : implementation file
//

#include "pch.h"

char* Algs[32] = {
	"Alg 1",
	"Alg 2",
	"Alg 3",
	"Alg 4",
	"Alg 5",
	"Alg 6",
	"Alg 7",
	"Alg 8",
	"Alg 9",
	"Alg 10",
	"Alg 11",
	"Alg 12",
	"Alg 13",
	"Alg 14",
	"Alg 15",
	"Alg 16",
	"Alg 17",
	"Alg 18",
	"Alg 19",
	"Alg 20",
	"Alg 21",
	"Alg 22",
	"Alg 23",
	"Alg 24",
	"Alg 25",
	"Alg 26",
	"Alg 27",
	"Alg 28",
	"Alg 29",
	"Alg 30",
	"Alg 31",
	"Alg 32"
};

int DrawDataAlg_1[] = {
	DX7_ALG_RECT_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_RECT_FILL_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_RECT,DX7_OP_COL_1,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_1,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_2,DX7_OP_ROW_1, DX7_OPERATOR_DIM, DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_2,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_2,DX7_OP_ROW_3,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_2,DX7_OP_ROW_4,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	//operator lables
	DX7_ALG_TEXT_COLOR,DX7_OP_TEXTOLOR,
	DX7_ALG_BACKGROUND_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_1 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'1',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_1 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'2',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_2 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'3',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_2 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'4',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_2 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_3 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'5',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_2 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_4 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'6',
	//signal rouiting
	DX7_ALG_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1 + DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_2,DX7_OP_COL_CENTER_1,DX7_OP_ROW_1,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1 + DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_2,DX7_OP_COL_CENTER_2,DX7_OP_ROW_1,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_3,DX7_OP_COL_CENTER_2,DX7_OP_ROW_2,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_4,DX7_OP_COL_CENTER_2,DX7_OP_ROW_3,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1 + DX7_OP_LINE_SPACING_Y,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1 + DX7_OP_LINE_SPACING_Y,
	//Feedback
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_4,DX7_OP_COL_CENTER_2,DX7_OP_ROW_4 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_4 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_2 - DX7_OP_LINE_SPACING_X, DX7_OP_ROW_4 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_4 + DX7_OP_LINE_SPACING_Y,DX7_OP_COL_2 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_BOT_4 + DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_2 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_4 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_2 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_BOT_4 + DX7_OP_LINE_SPACING_Y,
	//COMMON
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_COMMON_ROW,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_COMMON_ROW + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_STRING_ADD_CHAR,'C',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING,
	//Performance
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_PERFORMANCE_ROW,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_PERFORMANCE_ROW + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_STRING_ADD_CHAR,'P',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING_ADD_CHAR,'r',
	DX7_ALG_STRING_ADD_CHAR,'f',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'a',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING_ADD_CHAR,'c',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING,
	-1
};


int DrawDataAlg_2[] = {
	DX7_ALG_RECT_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_RECT_FILL_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_RECT,DX7_OP_COL_1,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_1,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_2,DX7_OP_ROW_1, DX7_OPERATOR_DIM, DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_2,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_2,DX7_OP_ROW_3,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_2,DX7_OP_ROW_4,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	//Lables
	DX7_ALG_TEXT_COLOR,DX7_OP_TEXTOLOR,
	DX7_ALG_BACKGROUND_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_1 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'1',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_1 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'2',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_2 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'3',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_2 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'4',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_2 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_3 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'5',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_2 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_4 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'6',
	//Signal Routing
	DX7_ALG_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1 + DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_2,DX7_OP_COL_CENTER_1,DX7_OP_ROW_1,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1 + DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_2,DX7_OP_COL_CENTER_2,DX7_OP_ROW_1,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_3,DX7_OP_COL_CENTER_2,DX7_OP_ROW_2,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_4,DX7_OP_COL_CENTER_2,DX7_OP_ROW_3,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1 + DX7_OP_LINE_SPACING_Y,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1 + DX7_OP_LINE_SPACING_Y,
	//Feedback
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_2,DX7_OP_COL_CENTER_1,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_1 - DX7_OP_LINE_SPACING_X, DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,DX7_OP_COL_1 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_1 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_1 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,
	//COMMON
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_COMMON_ROW,DX7_OPERATOR_DIM*5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_COMMON_ROW + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_STRING_ADD_CHAR,'C',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING,
	//Performance
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_PERFORMANCE_ROW,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_PERFORMANCE_ROW + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_STRING_ADD_CHAR,'P',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING_ADD_CHAR,'r',
	DX7_ALG_STRING_ADD_CHAR,'f',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'a',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING_ADD_CHAR,'c',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING,
	-1
};

int DrawDataAlg_3[] = {
	//operators
	DX7_ALG_RECT_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_RECT_FILL_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_RECT,DX7_OP_COL_1,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_1,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_1,DX7_OP_ROW_3,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_2,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_2,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_2,DX7_OP_ROW_3,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	//Operator Lables
	DX7_ALG_TEXT_COLOR,DX7_OP_TEXTOLOR,
	DX7_ALG_BACKGROUND_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_1 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'1',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_1 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'2',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_1 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_3 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'3',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_2 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'4',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_2 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'5',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_2 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_3 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'6',
	//Signal Routing
	DX7_ALG_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1 + DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_1,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_2,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_2,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_3,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1 + DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_1,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_2,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_2,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_3,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1 + DX7_OP_LINE_SPACING_Y,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1 + DX7_OP_LINE_SPACING_Y,
	//feedback
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_3,DX7_OP_COL_CENTER_2,DX7_OP_ROW_3 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_3 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_2 - DX7_OP_LINE_SPACING_X, DX7_OP_ROW_3 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_3 + DX7_OP_LINE_SPACING_Y,DX7_OP_COL_2 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_BOT_3 + DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_2 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_3 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_2 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_BOT_3 + DX7_OP_LINE_SPACING_Y,
	//COMMON
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_COMMON_ROW,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_COMMON_ROW + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_STRING_ADD_CHAR,'C',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING,
	//Performance
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_PERFORMANCE_ROW,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_PERFORMANCE_ROW + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_STRING_ADD_CHAR,'P',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING_ADD_CHAR,'r',
	DX7_ALG_STRING_ADD_CHAR,'f',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'a',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING_ADD_CHAR,'c',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING,
	-1
};

int DrawDataAlg_4[] = {
	//operators
	DX7_ALG_RECT_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_RECT_FILL_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_RECT,DX7_OP_COL_1,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_1,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_1,DX7_OP_ROW_3,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_2,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_2,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_2,DX7_OP_ROW_3,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	//Operator Lables
	DX7_ALG_TEXT_COLOR,DX7_OP_TEXTOLOR,
	DX7_ALG_BACKGROUND_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_1 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'1',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_1 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'2',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_1 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_3 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'3',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_2 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'4',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_2 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'5',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_2 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_3 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'6',
	//Signal Routing
	DX7_ALG_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_1,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_2,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_2,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_3,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_1,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_2,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_2,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_3,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	//feedback
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_3,DX7_OP_COL_CENTER_2,DX7_OP_ROW_3 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_3 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_2 - DX7_OP_LINE_SPACING_X, DX7_OP_ROW_3 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1 + DX7_OP_LINE_SPACING_Y,DX7_OP_COL_2 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_BOT_1 + DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_2 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_3 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_2 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_BOT_1 + DX7_OP_LINE_SPACING_Y,
	//COMMON
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_COMMON_ROW,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_COMMON_ROW + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_STRING_ADD_CHAR,'C',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING,
	//Performance
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_PERFORMANCE_ROW,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_PERFORMANCE_ROW + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_STRING_ADD_CHAR,'P',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING_ADD_CHAR,'r',
	DX7_ALG_STRING_ADD_CHAR,'f',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'a',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING_ADD_CHAR,'c',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING,
	-1
};

int DrawDataAlg_5[] = {
	//operators
	DX7_ALG_RECT_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_RECT_FILL_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_RECT,DX7_OP_COL_1,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_1,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_2,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_2,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_3,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_3,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	//operator lables
	DX7_ALG_TEXT_COLOR,DX7_OP_TEXTOLOR,
	DX7_ALG_BACKGROUND_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_1 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'1',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_1 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'2',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_2 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'3',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_2 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'4',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_3 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'5',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_3 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'6',
	//Signal Routing
	DX7_ALG_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_1,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_2,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_1,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_2,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_1,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_2,
	//feedback
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_2,DX7_OP_COL_CENTER_3,DX7_OP_ROW_2 + DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_2,DX7_OP_COL_CENTER_3,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_3 - DX7_OP_LINE_SPACING_X, DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,DX7_OP_COL_3 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_3 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_3 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,
	//COMMON
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_COMMON_ROW,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_COMMON_ROW + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_STRING_ADD_CHAR,'C',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING,
	//Performance
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_PERFORMANCE_ROW,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_PERFORMANCE_ROW + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_STRING_ADD_CHAR,'P',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING_ADD_CHAR,'r',
	DX7_ALG_STRING_ADD_CHAR,'f',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'a',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING_ADD_CHAR,'c',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING,
	-1
};

int DrawDataAlg_6[] = {
	//operators
	DX7_ALG_RECT_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_RECT_FILL_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_RECT,DX7_OP_COL_1,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_1,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_2,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_2,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_3,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_3,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	//operator lables
	DX7_ALG_TEXT_COLOR,DX7_OP_TEXTOLOR,
	DX7_ALG_BACKGROUND_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_1 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'1',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_1 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'2',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_2 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'3',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_2 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'4',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_3 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'5',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_3 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'6',
	//Signal Routing
	DX7_ALG_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_1,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_2,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_1,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_2,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_1,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_2,
	//feedback
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_2,DX7_OP_COL_CENTER_3,DX7_OP_ROW_2 + DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_2,DX7_OP_COL_CENTER_3,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_3 - DX7_OP_LINE_SPACING_X, DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_1 + DX7_OP_LINE_SPACING_Y,DX7_OP_COL_3 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_BOT_1 + DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_3 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_3 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_BOT_1 + DX7_OP_LINE_SPACING_Y,
	//COMMON
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_COMMON_ROW,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_COMMON_ROW + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_STRING_ADD_CHAR,'C',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING,
	//Performance
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_PERFORMANCE_ROW,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_PERFORMANCE_ROW + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_STRING_ADD_CHAR,'P',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING_ADD_CHAR,'r',
	DX7_ALG_STRING_ADD_CHAR,'f',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'a',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING_ADD_CHAR,'c',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING,
	-1
};

int DrawDataAlg_7[] = {
	//operators
	DX7_ALG_RECT_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_RECT_FILL_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_RECT,DX7_OP_COL_1,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_1,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_2,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_2,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_3,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_3,DX7_OP_ROW_3,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	//operator lables
	DX7_ALG_TEXT_COLOR,DX7_OP_TEXTOLOR,
	DX7_ALG_BACKGROUND_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_1 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'1',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_1 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'2',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_2 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'3',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_2 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'4',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_3 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'5',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_3 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_3 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'6',
	//Signal Routing
	DX7_ALG_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_1,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_2,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_1,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_2,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_2,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_3,
	DX7_ALG_LINE,DX7_OP_COL_3,DX7_OP_ROW_BOT_2,DX7_OP_COL_RHSIDE_2,DX7_OP_ROW_1,
	//feedback
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_3,DX7_OP_COL_CENTER_3,DX7_OP_ROW_3 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_3 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_3 - DX7_OP_LINE_SPACING_X, DX7_OP_ROW_3 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_3 + DX7_OP_LINE_SPACING_Y,DX7_OP_COL_3 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_BOT_3 + DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_3 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_3 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_3 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_BOT_3 + DX7_OP_LINE_SPACING_Y,
	//COMMON
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_COMMON_ROW,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_COMMON_ROW + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_STRING_ADD_CHAR,'C',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING,
	//Performance
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_PERFORMANCE_ROW,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_PERFORMANCE_ROW + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_STRING_ADD_CHAR,'P',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING_ADD_CHAR,'r',
	DX7_ALG_STRING_ADD_CHAR,'f',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'a',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING_ADD_CHAR,'c',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING,
	-1
};

int DrawDataAlg_8[] = {
	//operators
	DX7_ALG_RECT_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_RECT_FILL_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_RECT,DX7_OP_COL_1,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_1,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_2,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_2,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_3,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_3,DX7_OP_ROW_3,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	//operator lables
	DX7_ALG_TEXT_COLOR,DX7_OP_TEXTOLOR,
	DX7_ALG_BACKGROUND_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_1 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'1',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_1 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'2',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_2 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'3',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_2 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'4',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_3 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'5',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_3 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_3 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'6',
	//Signal Routing
	DX7_ALG_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_1,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_2,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_1,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_2,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_2,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_3,
	DX7_ALG_LINE,DX7_OP_COL_3,DX7_OP_ROW_BOT_2,DX7_OP_COL_RHSIDE_2,DX7_OP_ROW_1,
	//feedback
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_2,DX7_OP_COL_CENTER_2,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_2 - DX7_OP_LINE_SPACING_X, DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,DX7_OP_COL_2 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_2 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_2 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,
	//COMMON
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_COMMON_ROW,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_COMMON_ROW + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_STRING_ADD_CHAR,'C',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING,
	//Performance
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_PERFORMANCE_ROW,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_PERFORMANCE_ROW + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_STRING_ADD_CHAR,'P',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING_ADD_CHAR,'r',
	DX7_ALG_STRING_ADD_CHAR,'f',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'a',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING_ADD_CHAR,'c',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING,
	-1
};

int DrawDataAlg_9[] = {
	//operators
	DX7_ALG_RECT_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_RECT_FILL_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_RECT,DX7_OP_COL_1,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_1,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_2,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_2,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_3,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_3,DX7_OP_ROW_3,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	//operator lables
	DX7_ALG_TEXT_COLOR,DX7_OP_TEXTOLOR,
	DX7_ALG_BACKGROUND_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_1 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'1',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_1 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'2',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_2 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'3',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_2 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'4',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_3 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'5',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_3 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_3 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'6',
	//Signal Routing
	DX7_ALG_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_1,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_2,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_1,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_2,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_2,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_3,
	DX7_ALG_LINE,DX7_OP_COL_3,DX7_OP_ROW_BOT_2,DX7_OP_COL_RHSIDE_2,DX7_OP_ROW_1,
	//feedback
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_2,DX7_OP_COL_CENTER_1,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_1 - DX7_OP_LINE_SPACING_X, DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,DX7_OP_COL_1 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_1 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_1 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,
	//COMMON
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_COMMON_ROW,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_COMMON_ROW + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_STRING_ADD_CHAR,'C',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING,
	//Performance
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_PERFORMANCE_ROW,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_PERFORMANCE_ROW + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_STRING_ADD_CHAR,'P',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING_ADD_CHAR,'r',
	DX7_ALG_STRING_ADD_CHAR,'f',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'a',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING_ADD_CHAR,'c',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING,
	-1
};

int DrawDataAlg_10[] = {
	//operators
	DX7_ALG_RECT_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_RECT_FILL_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_RECT,DX7_OP_COL_1,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_1,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_1,DX7_OP_ROW_3,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_3,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_2,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_3,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	//operator lables
	DX7_ALG_TEXT_COLOR,DX7_OP_TEXTOLOR,
	DX7_ALG_BACKGROUND_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_1 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'1',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_1 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'2',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_1 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_3 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'3',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_3 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'4',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_2 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'5',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_3 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'6',
	//Signal Routing
	DX7_ALG_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_1,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_2,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_1,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_2,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_2,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_3,
	DX7_ALG_LINE,DX7_OP_COL_RHSIDE_2,DX7_OP_ROW_BOT_2,DX7_OP_COL_3,DX7_OP_ROW_1,
	//feedback
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_3,DX7_OP_COL_CENTER_1,DX7_OP_ROW_3 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_3 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_1 - DX7_OP_LINE_SPACING_X, DX7_OP_ROW_3 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_3 + DX7_OP_LINE_SPACING_Y,DX7_OP_COL_1 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_BOT_3 + DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_1 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_3 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_1 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_BOT_3 + DX7_OP_LINE_SPACING_Y,
	//COMMON
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_COMMON_ROW,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_COMMON_ROW + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_STRING_ADD_CHAR,'C',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING,
	//Performance
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_PERFORMANCE_ROW,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_PERFORMANCE_ROW + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_STRING_ADD_CHAR,'P',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING_ADD_CHAR,'r',
	DX7_ALG_STRING_ADD_CHAR,'f',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'a',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING_ADD_CHAR,'c',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING,
	-1
};

int DrawDataAlg_11[] = {
	//operators
	DX7_ALG_RECT_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_RECT_FILL_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_RECT,DX7_OP_COL_1,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_1,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_1,DX7_OP_ROW_3,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_3,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_2,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_3,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	//operator lables
	DX7_ALG_TEXT_COLOR,DX7_OP_TEXTOLOR,
	DX7_ALG_BACKGROUND_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_1 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'1',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_1 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'2',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_1 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_3 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'3',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_3 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'4',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_2 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'5',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_3 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'6',
	//Signal Routing
	DX7_ALG_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_1,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_2,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_1,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_2,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_2,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_3,
	DX7_ALG_LINE,DX7_OP_COL_RHSIDE_2,DX7_OP_ROW_BOT_2,DX7_OP_COL_3,DX7_OP_ROW_1,
	//feedback
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_2,DX7_OP_COL_CENTER_3,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_RHSIDE_3 + DX7_OP_LINE_SPACING_X, DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,DX7_OP_COL_RHSIDE_3 + DX7_OP_LINE_SPACING_X,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_RHSIDE_3 + DX7_OP_LINE_SPACING_X,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_RHSIDE_3 + DX7_OP_LINE_SPACING_X,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,
	//COMMON
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_COMMON_ROW,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_COMMON_ROW + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_STRING_ADD_CHAR,'C',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING,
	//Performance
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_PERFORMANCE_ROW,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_PERFORMANCE_ROW + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_STRING_ADD_CHAR,'P',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING_ADD_CHAR,'r',
	DX7_ALG_STRING_ADD_CHAR,'f',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'a',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING_ADD_CHAR,'c',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING,
	-1
};

int DrawDataAlg_12[] = {
	//operators
	DX7_ALG_RECT_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_RECT_FILL_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_RECT,DX7_OP_COL_1,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_1,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_3,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_2,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_3,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_4,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	//operator lables
	DX7_ALG_TEXT_COLOR,DX7_OP_TEXTOLOR,
	DX7_ALG_BACKGROUND_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_1 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'1',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_1 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'2',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_3 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'3',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_2 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'4',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_3 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'5',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_4 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'6',
	//Signal Routing
	DX7_ALG_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_1,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_2,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_1,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_2,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_RHSIDE_3,DX7_OP_ROW_1,DX7_OP_COL_4,DX7_OP_ROW_BOT_2,
	DX7_ALG_LINE,DX7_OP_COL_RHSIDE_2,DX7_OP_ROW_BOT_2,DX7_OP_COL_3,DX7_OP_ROW_1,
	//feedback
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_2,DX7_OP_COL_CENTER_1,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_1 - DX7_OP_LINE_SPACING_X, DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,DX7_OP_COL_1 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_1 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_1 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,
	//COMMON
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_COMMON_ROW,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_COMMON_ROW + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_STRING_ADD_CHAR,'C',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING,
	//Performance
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_PERFORMANCE_ROW,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_PERFORMANCE_ROW + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_STRING_ADD_CHAR,'P',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING_ADD_CHAR,'r',
	DX7_ALG_STRING_ADD_CHAR,'f',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'a',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING_ADD_CHAR,'c',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING,
	-1
};

int DrawDataAlg_13[] = {
	//operators
	DX7_ALG_RECT_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_RECT_FILL_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_RECT,DX7_OP_COL_1,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_1,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_3,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_2,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_3,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_4,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	//operator lables
	DX7_ALG_TEXT_COLOR,DX7_OP_TEXTOLOR,
	DX7_ALG_BACKGROUND_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_1 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'1',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_1 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'2',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_3 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'3',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_2 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'4',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_3 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'5',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_4 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'6',
	//Signal Routing
	DX7_ALG_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_1,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_2,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_1,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_2,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_RHSIDE_3,DX7_OP_ROW_1,DX7_OP_COL_4,DX7_OP_ROW_BOT_2,
	DX7_ALG_LINE,DX7_OP_COL_RHSIDE_2,DX7_OP_ROW_BOT_2,DX7_OP_COL_3,DX7_OP_ROW_1,
	//feedback
	DX7_ALG_LINE,DX7_OP_COL_CENTER_4,DX7_OP_ROW_2,DX7_OP_COL_CENTER_4,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_4,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_RHSIDE_4 + DX7_OP_LINE_SPACING_X, DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_4,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,DX7_OP_COL_RHSIDE_4 + DX7_OP_LINE_SPACING_X,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_RHSIDE_4 + DX7_OP_LINE_SPACING_X,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_RHSIDE_4 + DX7_OP_LINE_SPACING_X,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_4 ,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,DX7_OP_COL_CENTER_4,DX7_OP_ROW_BOT_2,
	//COMMON
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_COMMON_ROW,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_COMMON_ROW + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_STRING_ADD_CHAR,'C',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING,
	//Performance
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_PERFORMANCE_ROW,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_PERFORMANCE_ROW + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_STRING_ADD_CHAR,'P',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING_ADD_CHAR,'r',
	DX7_ALG_STRING_ADD_CHAR,'f',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'a',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING_ADD_CHAR,'c',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING,
	-1
};

int DrawDataAlg_14[] = {
	//operators
	DX7_ALG_RECT_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_RECT_FILL_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_RECT,DX7_OP_COL_1,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_1,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_2,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_2,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_1,DX7_OP_ROW_3,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_2,DX7_OP_ROW_3,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	//operator lables
	DX7_ALG_TEXT_COLOR,DX7_OP_TEXTOLOR,
	DX7_ALG_BACKGROUND_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_1 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'1',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_1 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'2',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_2 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'3',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_2 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'4',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_1 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_3 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'5',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_2 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_3 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'6',
	//Signal Routing
	DX7_ALG_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_1,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_2,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_1,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_2,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_RHSIDE_1,DX7_OP_ROW_BOT_3,DX7_OP_COL_2,DX7_OP_ROW_2,
	//feedback
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_3,DX7_OP_COL_CENTER_2,DX7_OP_ROW_3 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_3 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_RHSIDE_2 + DX7_OP_LINE_SPACING_X, DX7_OP_ROW_3 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_3 + DX7_OP_LINE_SPACING_Y,DX7_OP_COL_RHSIDE_2 + DX7_OP_LINE_SPACING_X,DX7_OP_ROW_BOT_3 + DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_RHSIDE_2 + DX7_OP_LINE_SPACING_X,DX7_OP_ROW_3 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_RHSIDE_2 + DX7_OP_LINE_SPACING_X,DX7_OP_ROW_BOT_3 + DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2 ,DX7_OP_ROW_BOT_3 /*+ DX7_OP_LINE_SPACING_Y */,DX7_OP_COL_CENTER_2,DX7_OP_ROW_2,
	//COMMON
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_COMMON_ROW,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_COMMON_ROW + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_STRING_ADD_CHAR,'C',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING,
	//Performance
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_PERFORMANCE_ROW,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_PERFORMANCE_ROW + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_STRING_ADD_CHAR,'P',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING_ADD_CHAR,'r',
	DX7_ALG_STRING_ADD_CHAR,'f',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'a',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING_ADD_CHAR,'c',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING,
	-1
};

int DrawDataAlg_15[] = {
	//operators
	DX7_ALG_RECT_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_RECT_FILL_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_RECT,DX7_OP_COL_1,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_1,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_2,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_2,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_1,DX7_OP_ROW_3,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_2,DX7_OP_ROW_3,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	//operator lables
	DX7_ALG_TEXT_COLOR,DX7_OP_TEXTOLOR,
	DX7_ALG_BACKGROUND_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_1 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'1',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_1 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'2',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_2 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'3',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_2 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'4',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_1 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_3 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'5',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_2 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_3 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'6',
	//Signal Routing
	DX7_ALG_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_1,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_2,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_1,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_2,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_RHSIDE_1,DX7_OP_ROW_BOT_3,DX7_OP_COL_2,DX7_OP_ROW_2,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2 ,DX7_OP_ROW_BOT_3,DX7_OP_COL_CENTER_2,DX7_OP_ROW_2,
		//feedback
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_2,DX7_OP_COL_CENTER_1,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_1 - DX7_OP_LINE_SPACING_X, DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,DX7_OP_COL_1 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_1 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_1 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,
	//COMMON
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_COMMON_ROW,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_COMMON_ROW + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_STRING_ADD_CHAR,'C',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING,
	//Performance
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_PERFORMANCE_ROW,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_PERFORMANCE_ROW + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_STRING_ADD_CHAR,'P',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING_ADD_CHAR,'r',
	DX7_ALG_STRING_ADD_CHAR,'f',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'a',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING_ADD_CHAR,'c',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING,
	-1
};

int DrawDataAlg_16[] = {
	//operators
	DX7_ALG_RECT_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_RECT_FILL_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_RECT,DX7_OP_COL_2,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_1,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_2,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_2,DX7_OP_ROW_3,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_3,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_3,DX7_OP_ROW_3,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	//operator lables
	DX7_ALG_TEXT_COLOR,DX7_OP_TEXTOLOR,
	DX7_ALG_BACKGROUND_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_2 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'1',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_1 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'2',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_2 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'3',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_2 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_3 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'4',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_3 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'5',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_3 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_3 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'6',
	//Signal Routing
	DX7_ALG_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_LINE,DX7_OP_COL_3,DX7_OP_ROW_BOT_2,DX7_OP_COL_RHSIDE_2,DX7_OP_ROW_1,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_2,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_3,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_1,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_2,
	DX7_ALG_LINE,DX7_OP_COL_RHSIDE_1,DX7_OP_ROW_BOT_2,DX7_OP_COL_2,DX7_OP_ROW_1,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2 ,DX7_OP_ROW_BOT_3,DX7_OP_COL_CENTER_2,DX7_OP_ROW_2,
	//feedback
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_3,DX7_OP_COL_CENTER_3,DX7_OP_ROW_3 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_3 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_3 - DX7_OP_LINE_SPACING_X, DX7_OP_ROW_3 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_3 + DX7_OP_LINE_SPACING_Y,DX7_OP_COL_3 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_BOT_3 + DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_3 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_3 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_3 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_BOT_3 + DX7_OP_LINE_SPACING_Y,
	//COMMON
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_COMMON_ROW,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_COMMON_ROW + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_STRING_ADD_CHAR,'C',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING,
	//Performance
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_PERFORMANCE_ROW,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_PERFORMANCE_ROW + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_STRING_ADD_CHAR,'P',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING_ADD_CHAR,'r',
	DX7_ALG_STRING_ADD_CHAR,'f',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'a',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING_ADD_CHAR,'c',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING,
-1
};

int DrawDataAlg_17[] = {
	//operators
	DX7_ALG_RECT_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_RECT_FILL_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_RECT,DX7_OP_COL_2,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_1,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_2,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_2,DX7_OP_ROW_3,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_3,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_3,DX7_OP_ROW_3,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	//operator lables
	DX7_ALG_TEXT_COLOR,DX7_OP_TEXTOLOR,
	DX7_ALG_BACKGROUND_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_2 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'1',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_1 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'2',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_2 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'3',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_2 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_3 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'4',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_3 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'5',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_3 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_3 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'6',
	//Signal Routing
	DX7_ALG_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_LINE,DX7_OP_COL_3,DX7_OP_ROW_BOT_2,DX7_OP_COL_RHSIDE_2,DX7_OP_ROW_1,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_2,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_3,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_1,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_2,
	DX7_ALG_LINE,DX7_OP_COL_RHSIDE_1,DX7_OP_ROW_BOT_2,DX7_OP_COL_2,DX7_OP_ROW_1,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2 ,DX7_OP_ROW_BOT_3,DX7_OP_COL_CENTER_2,DX7_OP_ROW_2,
	//feedback
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_2,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_2,DX7_OP_COL_CENTER_1,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_1 - DX7_OP_LINE_SPACING_X, DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,DX7_OP_COL_1 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_1 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_1 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,
	//COMMON
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_COMMON_ROW,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_COMMON_ROW + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_STRING_ADD_CHAR,'C',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING,
	//Performance
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_PERFORMANCE_ROW,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_PERFORMANCE_ROW + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_STRING_ADD_CHAR,'P',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING_ADD_CHAR,'r',
	DX7_ALG_STRING_ADD_CHAR,'f',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'a',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING_ADD_CHAR,'c',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING,
	-1
};

int DrawDataAlg_18[] = {
	//operators
	DX7_ALG_RECT_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_RECT_FILL_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_RECT,DX7_OP_COL_2,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_1,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_2,DX7_OP_ROW_3,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_3,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_3,DX7_OP_ROW_3,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_3,DX7_OP_ROW_4,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	//operator lables
	DX7_ALG_TEXT_COLOR,DX7_OP_TEXTOLOR,
	DX7_ALG_BACKGROUND_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_2 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'1',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_1 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'2',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_2 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_3 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'3',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_3 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'4',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_3 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_3 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'5',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_3 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_4 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'6',
	//Signal Routing
	DX7_ALG_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_LINE,DX7_OP_COL_3,DX7_OP_ROW_BOT_2,DX7_OP_COL_RHSIDE_2,DX7_OP_ROW_1,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_2,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_3,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_3,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_4,
	DX7_ALG_LINE,DX7_OP_COL_RHSIDE_1,DX7_OP_ROW_BOT_2,DX7_OP_COL_2,DX7_OP_ROW_1,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2 ,DX7_OP_ROW_BOT_3,DX7_OP_COL_CENTER_2,DX7_OP_ROW_1,
	//feedback
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_3,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_3 + DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_3,DX7_OP_COL_CENTER_2,DX7_OP_ROW_3 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_3 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_2 - DX7_OP_LINE_SPACING_X, DX7_OP_ROW_3 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_3 + DX7_OP_LINE_SPACING_Y,DX7_OP_COL_2 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_BOT_3 + DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_2 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_3 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_2 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_BOT_3 + DX7_OP_LINE_SPACING_Y,
	//COMMON
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_COMMON_ROW,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_COMMON_ROW + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_STRING_ADD_CHAR,'C',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING,
	//Performance
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_PERFORMANCE_ROW,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_PERFORMANCE_ROW + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_STRING_ADD_CHAR,'P',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING_ADD_CHAR,'r',
	DX7_ALG_STRING_ADD_CHAR,'f',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'a',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING_ADD_CHAR,'c',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING,
	-1
};

int DrawDataAlg_19[] = {
	//operators
	DX7_ALG_RECT_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_RECT_FILL_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_RECT,DX7_OP_COL_1,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_1,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_1,DX7_OP_ROW_3,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_2,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_3,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_3,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	//operator lables
	DX7_ALG_TEXT_COLOR,DX7_OP_TEXTOLOR,
	DX7_ALG_BACKGROUND_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_1 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'1',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_1 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'2',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_1 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_3 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'3',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_2 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'4',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_3 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'5',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_3 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'6',
	//Signal Routing
	DX7_ALG_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_2,DX7_OP_COL_CENTER_3,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_1,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_2,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2 ,DX7_OP_ROW_1,DX7_OP_COL_CENTER_2,DX7_OP_ROW_1 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1 ,DX7_OP_ROW_2,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_3,
	//feedback
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_2,DX7_OP_COL_CENTER_3,DX7_OP_ROW_1,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_2,DX7_OP_COL_CENTER_3,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_3 - DX7_OP_LINE_SPACING_X, DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_3 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_3 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,
	//COMMON
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_COMMON_ROW,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_COMMON_ROW + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_STRING_ADD_CHAR,'C',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING,
	//Performance
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_PERFORMANCE_ROW,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_PERFORMANCE_ROW + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_STRING_ADD_CHAR,'P',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING_ADD_CHAR,'r',
	DX7_ALG_STRING_ADD_CHAR,'f',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'a',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING_ADD_CHAR,'c',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING,
	-1
};

int DrawDataAlg_20[] = {
	//operators
	DX7_ALG_RECT_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_RECT_FILL_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_RECT,DX7_OP_COL_1,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_2,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_1,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_4,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_3,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_4,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	//operator lables
	DX7_ALG_TEXT_COLOR,DX7_OP_TEXTOLOR,
	DX7_ALG_BACKGROUND_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_1 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'1',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_2 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'2',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_1 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'3',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_4 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'4',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_3 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'5',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_4 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'6',
	//Signal Routing
	DX7_ALG_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_2,DX7_OP_COL_CENTER_1,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_4,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_4,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,DX7_OP_COL_CENTER_4,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_1,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_2,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2 ,DX7_OP_ROW_1,DX7_OP_COL_CENTER_2,DX7_OP_ROW_1 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_4 ,DX7_OP_ROW_1,DX7_OP_COL_CENTER_4,DX7_OP_ROW_BOT_2,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3 ,DX7_OP_ROW_BOT_2,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3 ,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,DX7_OP_COL_CENTER_4,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,
	//feedback
	DX7_ALG_LINE,DX7_OP_COL_1 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_1 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_CENTER_2,DX7_OP_ROW_1 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_2,DX7_OP_COL_CENTER_1,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_1 - DX7_OP_LINE_SPACING_X, DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_1 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_1 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,
	//COMMON
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_COMMON_ROW,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_COMMON_ROW + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_STRING_ADD_CHAR,'C',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING,
	//Performance
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_PERFORMANCE_ROW,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_PERFORMANCE_ROW + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_STRING_ADD_CHAR,'P',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING_ADD_CHAR,'r',
	DX7_ALG_STRING_ADD_CHAR,'f',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'a',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING_ADD_CHAR,'c',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING,
	-1
};

int DrawDataAlg_21[] = {
	//operators
	DX7_ALG_RECT_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_RECT_FILL_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_RECT,DX7_OP_COL_1,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_2,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_1,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_3,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_4,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_4,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	//operator lables
	DX7_ALG_TEXT_COLOR,DX7_OP_TEXTOLOR,
	DX7_ALG_BACKGROUND_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_1 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'1',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_2 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'2',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_1 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'3',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_3 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'4',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_4 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'5',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_4 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'6',
	//Signal Routing
	DX7_ALG_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_2,DX7_OP_COL_CENTER_1,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_4,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_4,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,DX7_OP_COL_CENTER_4,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_1,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_2,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2 ,DX7_OP_ROW_1,DX7_OP_COL_CENTER_2,DX7_OP_ROW_1 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_4 ,DX7_OP_ROW_1,DX7_OP_COL_CENTER_4,DX7_OP_ROW_BOT_2,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3 ,DX7_OP_ROW_1,DX7_OP_COL_CENTER_3,DX7_OP_ROW_1 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3 ,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,DX7_OP_COL_CENTER_4,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3 ,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	//feedback
	DX7_ALG_LINE,DX7_OP_COL_1 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_1 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_CENTER_2,DX7_OP_ROW_1 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_2,DX7_OP_COL_CENTER_1,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_1 - DX7_OP_LINE_SPACING_X, DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_1 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_1 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,
	//COMMON
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_COMMON_ROW,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_COMMON_ROW + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_STRING_ADD_CHAR,'C',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING,
	//Performance
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_PERFORMANCE_ROW,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_PERFORMANCE_ROW + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_STRING_ADD_CHAR,'P',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING_ADD_CHAR,'r',
	DX7_ALG_STRING_ADD_CHAR,'f',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'a',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING_ADD_CHAR,'c',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING,
	-1
};

int DrawDataAlg_22[] = {
	//operators
	DX7_ALG_RECT_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_RECT_FILL_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_RECT,DX7_OP_COL_1,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_1,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_2,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_3,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_4,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_3,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	//operator lables
	DX7_ALG_TEXT_COLOR,DX7_OP_TEXTOLOR,
	DX7_ALG_BACKGROUND_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_1 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'1',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_1 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'2',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_2 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'3',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_3 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'4',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_4 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'5',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_3 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'6',
	//Signal Routing
	DX7_ALG_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_4,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_4,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,DX7_OP_COL_CENTER_4,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_1,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_2,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2 ,DX7_OP_ROW_1,DX7_OP_COL_CENTER_2,DX7_OP_ROW_1 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_4 ,DX7_OP_ROW_1,DX7_OP_COL_CENTER_4,DX7_OP_ROW_1 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3 ,DX7_OP_ROW_1,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_2,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3 ,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,DX7_OP_COL_CENTER_4,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3 ,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	//feedback
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_1 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_CENTER_3,DX7_OP_ROW_1 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_2,DX7_OP_COL_CENTER_3,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_3 - DX7_OP_LINE_SPACING_X, DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_3 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_3 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,
	//COMMON
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_COMMON_ROW,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_COMMON_ROW + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_STRING_ADD_CHAR,'C',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING,
	//Performance
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_PERFORMANCE_ROW,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_PERFORMANCE_ROW + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_STRING_ADD_CHAR,'P',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING_ADD_CHAR,'r',
	DX7_ALG_STRING_ADD_CHAR,'f',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'a',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING_ADD_CHAR,'c',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING,
	-1
};

int DrawDataAlg_23[] = {
	//operators
	DX7_ALG_RECT_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_RECT_FILL_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_RECT,DX7_OP_COL_1,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_2,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_2,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_3,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_4,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_3,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	//operator lables
	DX7_ALG_TEXT_COLOR,DX7_OP_TEXTOLOR,
	DX7_ALG_BACKGROUND_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_1 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'1',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_2 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'2',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_2 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'3',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_3 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'4',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_4 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'5',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_3 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'6',
	//Signal Routing
	DX7_ALG_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3 ,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_4,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_4,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,DX7_OP_COL_CENTER_4,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,

	DX7_ALG_LINE,DX7_OP_COL_CENTER_4 ,DX7_OP_ROW_1,DX7_OP_COL_CENTER_4,DX7_OP_ROW_1 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2 ,DX7_OP_ROW_1,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_2,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3 ,DX7_OP_ROW_BOT_2,DX7_OP_COL_CENTER_3,DX7_OP_ROW_1,
	//feedback
	DX7_ALG_LINE,DX7_OP_COL_3 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_1 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_CENTER_4,DX7_OP_ROW_1 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_2,DX7_OP_COL_CENTER_3,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_3 - DX7_OP_LINE_SPACING_X, DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_3 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_3 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,
	//COMMON
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_COMMON_ROW,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_COMMON_ROW + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_STRING_ADD_CHAR,'C',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING,
	//Performance
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_PERFORMANCE_ROW,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_PERFORMANCE_ROW + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_STRING_ADD_CHAR,'P',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING_ADD_CHAR,'r',
	DX7_ALG_STRING_ADD_CHAR,'f',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'a',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING_ADD_CHAR,'c',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING,
	-1
};

int DrawDataAlg_24[] = {
	//operators
	DX7_ALG_RECT_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_RECT_FILL_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_RECT,DX7_OP_COL_1,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_2,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_3,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_4,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_5,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_4,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	//operator lables
	DX7_ALG_TEXT_COLOR,DX7_OP_TEXTOLOR,
	DX7_ALG_BACKGROUND_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_1 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'1',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_2 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'2',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_3 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'3',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_4 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'4',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_5 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'5',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_4 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'6',
	//Signal Routing
	DX7_ALG_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3 ,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_4,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_4,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_5,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_5,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,DX7_OP_COL_CENTER_5,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,

	DX7_ALG_LINE,DX7_OP_COL_CENTER_3 ,DX7_OP_ROW_1,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_4 ,DX7_OP_ROW_1,DX7_OP_COL_CENTER_4,DX7_OP_ROW_BOT_2,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_5 ,DX7_OP_ROW_1,DX7_OP_COL_CENTER_5,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,
	//feedback
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_1 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_CENTER_5,DX7_OP_ROW_1 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_4,DX7_OP_ROW_2,DX7_OP_COL_CENTER_4,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_4,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_4 - DX7_OP_LINE_SPACING_X, DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_4 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_4 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,
	//COMMON
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_COMMON_ROW,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_COMMON_ROW + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_STRING_ADD_CHAR,'C',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING,
	//Performance
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_PERFORMANCE_ROW,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_PERFORMANCE_ROW + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_STRING_ADD_CHAR,'P',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING_ADD_CHAR,'r',
	DX7_ALG_STRING_ADD_CHAR,'f',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'a',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING_ADD_CHAR,'c',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING,
	-1
};

int DrawDataAlg_25[] = {
	//operators
	DX7_ALG_RECT_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_RECT_FILL_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_RECT,DX7_OP_COL_1,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_2,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_3,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_4,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_5,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_4,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	//operator lables
	DX7_ALG_TEXT_COLOR,DX7_OP_TEXTOLOR,
	DX7_ALG_BACKGROUND_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_1 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'1',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_2 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'2',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_3 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'3',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_4 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'4',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_5 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'5',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_4 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'6',
	//Signal Routing
	DX7_ALG_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3 ,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_4,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_4,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_5,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_5,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,DX7_OP_COL_CENTER_5,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,

	DX7_ALG_LINE,DX7_OP_COL_CENTER_4 ,DX7_OP_ROW_1,DX7_OP_COL_CENTER_4,DX7_OP_ROW_BOT_2,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_5 ,DX7_OP_ROW_1,DX7_OP_COL_CENTER_5,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,
	//feedback
	DX7_ALG_LINE,DX7_OP_COL_4 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_1 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_CENTER_5,DX7_OP_ROW_1 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_4,DX7_OP_ROW_2,DX7_OP_COL_CENTER_4,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_4,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_4 - DX7_OP_LINE_SPACING_X, DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_4 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_4 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,
	//COMMON
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_COMMON_ROW,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_COMMON_ROW + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_STRING_ADD_CHAR,'C',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING,
	//Performance
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_PERFORMANCE_ROW,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_PERFORMANCE_ROW + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_STRING_ADD_CHAR,'P',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING_ADD_CHAR,'r',
	DX7_ALG_STRING_ADD_CHAR,'f',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'a',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING_ADD_CHAR,'c',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING,
	-1
};

int DrawDataAlg_26[] = {
	//operators
	DX7_ALG_RECT_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_RECT_FILL_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_RECT,DX7_OP_COL_1,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_2,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_2,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_4,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_3,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_4,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	//operator lables
	DX7_ALG_TEXT_COLOR,DX7_OP_TEXTOLOR,
	DX7_ALG_BACKGROUND_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_1 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'1',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_2 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'2',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_2 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'3',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_4 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'4',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_3 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'5',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_4 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'6',
	//Signal Routing
	DX7_ALG_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_4,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_4,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,DX7_OP_COL_CENTER_4,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,

	DX7_ALG_LINE,DX7_OP_COL_CENTER_3 ,DX7_OP_ROW_1 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_2,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_4 ,DX7_OP_ROW_1,DX7_OP_COL_CENTER_4,DX7_OP_ROW_BOT_2,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2 ,DX7_OP_ROW_1,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_2,
	//feedback
	DX7_ALG_LINE,DX7_OP_COL_CENTER_4/* - DX7_OP_LINE_SPACING_X*/,DX7_OP_ROW_1 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_CENTER_3,DX7_OP_ROW_1 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_4,DX7_OP_ROW_2,DX7_OP_COL_CENTER_4,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_4,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_4 - DX7_OP_LINE_SPACING_X, DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_4 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_4 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,
	//COMMON
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_COMMON_ROW,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_COMMON_ROW + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_STRING_ADD_CHAR,'C',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING,
	//Performance
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_PERFORMANCE_ROW,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_PERFORMANCE_ROW + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_STRING_ADD_CHAR,'P',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING_ADD_CHAR,'r',
	DX7_ALG_STRING_ADD_CHAR,'f',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'a',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING_ADD_CHAR,'c',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING,
	-1
};

int DrawDataAlg_27[] = {
	//operators
	DX7_ALG_RECT_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_RECT_FILL_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_RECT,DX7_OP_COL_1,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_2,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_2,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_4,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_3,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_4,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	//operator lables
	DX7_ALG_TEXT_COLOR,DX7_OP_TEXTOLOR,
	DX7_ALG_BACKGROUND_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_1 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'1',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_2 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'2',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_2 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'3',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_4 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'4',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_3 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'5',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_4 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'6',
	//Signal Routing
	DX7_ALG_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_4,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_4,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,DX7_OP_COL_CENTER_4,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,

	DX7_ALG_LINE,DX7_OP_COL_CENTER_3 ,DX7_OP_ROW_1 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_2,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_4 ,DX7_OP_ROW_1,DX7_OP_COL_CENTER_4,DX7_OP_ROW_BOT_2,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_4 ,DX7_OP_ROW_1 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_CENTER_3,DX7_OP_ROW_1 - DX7_OP_LINE_SPACING_Y,
	//feedback
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_1 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_2 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_1 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_2,DX7_OP_COL_CENTER_2,DX7_OP_ROW_1,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_2,DX7_OP_COL_CENTER_2,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_2 - DX7_OP_LINE_SPACING_X, DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_2 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_2 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,
	//COMMON
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_COMMON_ROW,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_COMMON_ROW + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_STRING_ADD_CHAR,'C',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING,
	//Performance
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_PERFORMANCE_ROW,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_PERFORMANCE_ROW + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_STRING_ADD_CHAR,'P',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING_ADD_CHAR,'r',
	DX7_ALG_STRING_ADD_CHAR,'f',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'a',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING_ADD_CHAR,'c',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING,
	-1
};

int DrawDataAlg_28[] = {
	//operators
	DX7_ALG_RECT_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_RECT_FILL_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_RECT,DX7_OP_COL_1,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_1,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_2,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_2,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_2,DX7_OP_ROW_3,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_3,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	//operator lables
	DX7_ALG_TEXT_COLOR,DX7_OP_TEXTOLOR,
	DX7_ALG_BACKGROUND_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_1 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'1',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_1 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'2',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_2 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'3',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_2 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'4',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_2 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_3 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'5',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_3 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'6',
	//Signal Routing
	DX7_ALG_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,

	DX7_ALG_LINE,DX7_OP_COL_CENTER_2 ,DX7_OP_ROW_1,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_2,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1 ,DX7_OP_ROW_1,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_2,
	//feedback
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_3 + DX7_OP_LINE_SPACING_Y,DX7_OP_COL_2 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_BOT_3 + DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_3,DX7_OP_COL_CENTER_2,DX7_OP_ROW_2,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_3,DX7_OP_COL_CENTER_2,DX7_OP_ROW_3 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_3 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_2 - DX7_OP_LINE_SPACING_X, DX7_OP_ROW_3 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_2 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_3 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_2 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_BOT_3 + DX7_OP_LINE_SPACING_Y,
	//COMMON
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_COMMON_ROW,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_COMMON_ROW + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_STRING_ADD_CHAR,'C',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING,
	//Performance
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_PERFORMANCE_ROW,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_PERFORMANCE_ROW + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_STRING_ADD_CHAR,'P',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING_ADD_CHAR,'r',
	DX7_ALG_STRING_ADD_CHAR,'f',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'a',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING_ADD_CHAR,'c',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING,
	-1
};

int DrawDataAlg_29[] = {
	//operators
	DX7_ALG_RECT_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_RECT_FILL_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_RECT,DX7_OP_COL_1,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_2,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_3,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_3,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_4,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_4,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	//operator lables
	DX7_ALG_TEXT_COLOR,DX7_OP_TEXTOLOR,
	DX7_ALG_BACKGROUND_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_1 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'1',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_2 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'2',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_3 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'3',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_3 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'4',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_4 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'5',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_4 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'6',
	//Signal Routing
	DX7_ALG_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_4,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_4,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,DX7_OP_COL_CENTER_4,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,

	DX7_ALG_LINE,DX7_OP_COL_CENTER_3 ,DX7_OP_ROW_1,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_2,
	//feedback
	DX7_ALG_LINE,DX7_OP_COL_CENTER_4,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,DX7_OP_COL_4 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_4,DX7_OP_ROW_BOT_2,DX7_OP_COL_CENTER_4,DX7_OP_ROW_1,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_4,DX7_OP_ROW_2,DX7_OP_COL_CENTER_4,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_4,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_4 - DX7_OP_LINE_SPACING_X, DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_4 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_4 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,
	//COMMON
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_COMMON_ROW,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_COMMON_ROW + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_STRING_ADD_CHAR,'C',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING,
	//Performance
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_PERFORMANCE_ROW,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_PERFORMANCE_ROW + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_STRING_ADD_CHAR,'P',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING_ADD_CHAR,'r',
	DX7_ALG_STRING_ADD_CHAR,'f',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'a',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING_ADD_CHAR,'c',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING,
	-1
};

int DrawDataAlg_30[] = {
	//operators
	DX7_ALG_RECT_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_RECT_FILL_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_RECT,DX7_OP_COL_1,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_2,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_3,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_3,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_3,DX7_OP_ROW_3,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_4,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	//operator lables
	DX7_ALG_TEXT_COLOR,DX7_OP_TEXTOLOR,
	DX7_ALG_BACKGROUND_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_1 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'1',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_2 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'2',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_3 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'3',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_3 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'4',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_3 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_3 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'5',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_4 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'6',
	//Signal Routing
	DX7_ALG_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_4,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_4,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,DX7_OP_COL_CENTER_4,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,

	DX7_ALG_LINE,DX7_OP_COL_CENTER_3 ,DX7_OP_ROW_1,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_2,
	//feedback
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_3 + DX7_OP_LINE_SPACING_Y,DX7_OP_COL_3 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_BOT_3 + DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_3,DX7_OP_COL_CENTER_3,DX7_OP_ROW_2,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_3,DX7_OP_COL_CENTER_3,DX7_OP_ROW_3 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_3 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_3 - DX7_OP_LINE_SPACING_X, DX7_OP_ROW_3 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_3 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_3 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_3 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_BOT_3 + DX7_OP_LINE_SPACING_Y,
	//COMMON
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_COMMON_ROW,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_COMMON_ROW + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_STRING_ADD_CHAR,'C',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING,
	//Performance
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_PERFORMANCE_ROW,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_PERFORMANCE_ROW + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_STRING_ADD_CHAR,'P',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING_ADD_CHAR,'r',
	DX7_ALG_STRING_ADD_CHAR,'f',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'a',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING_ADD_CHAR,'c',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING,
	-1
};

int DrawDataAlg_31[] = {
	//operators
	DX7_ALG_RECT_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_RECT_FILL_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_RECT,DX7_OP_COL_1,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_2,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_3,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_4,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_5,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_5,DX7_OP_ROW_2,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	//operator lables
	DX7_ALG_TEXT_COLOR,DX7_OP_TEXTOLOR,
	DX7_ALG_BACKGROUND_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_1 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'1',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_2 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'2',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_3 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'3',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_4 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'4',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_5 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'5',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_5 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_2 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'6',
	//Signal Routing
	DX7_ALG_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_4,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_4,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_5,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_5,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,DX7_OP_COL_CENTER_5,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	//feedback
	DX7_ALG_LINE,DX7_OP_COL_CENTER_5,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,DX7_OP_COL_5 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_5,DX7_OP_ROW_BOT_2,DX7_OP_COL_CENTER_5,DX7_OP_ROW_1,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_5,DX7_OP_ROW_2,DX7_OP_COL_CENTER_5,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_5,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_5 - DX7_OP_LINE_SPACING_X, DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_5 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_2 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_5 - DX7_OP_LINE_SPACING_X,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,
	//COMMON
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_COMMON_ROW,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_COMMON_ROW + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_STRING_ADD_CHAR,'C',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING,
	//Performance
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_PERFORMANCE_ROW,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_PERFORMANCE_ROW + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_STRING_ADD_CHAR,'P',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING_ADD_CHAR,'r',
	DX7_ALG_STRING_ADD_CHAR,'f',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'a',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING_ADD_CHAR,'c',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING,
	-1
};

int DrawDataAlg_32[] = {
	//operators
	DX7_ALG_RECT_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_RECT_FILL_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_RECT,DX7_OP_COL_1,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_2,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_3,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_4,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_5,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	DX7_ALG_RECT,DX7_OP_COL_6,DX7_OP_ROW_1,DX7_OPERATOR_DIM,DX7_OPERATOR_DIM,
	//operator lables
	DX7_ALG_TEXT_COLOR,DX7_OP_TEXTOLOR,
	DX7_ALG_BACKGROUND_COLOR,DX7_OP_BKCOLOR,
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_1 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'1',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_2 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'2',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_3 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'3',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_4 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'4',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_5 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'5',
	DX7_ALG_TEXT_LOCATION,DX7_OP_COL_6 + DX7_OP_TEXTOFFSET_X,DX7_OP_ROW_1 + DX7_OP_TEXTOFFSET_Y,
	DX7_ALG_TEXT_CHARACTER,'6',
	//Signal Routing
	DX7_ALG_LINE_COLOR,DX7_OP_LINECOLOR,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_2,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_3,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_4,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_4,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_5,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_5,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_6,DX7_OP_ROW_BOT_1,DX7_OP_COL_CENTER_6,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_1,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,DX7_OP_COL_CENTER_6,DX7_OP_ROW_BOT_1 + DX7_OP_ROW_BETWEEN,
	//feedback
	DX7_ALG_LINE,DX7_OP_COL_RHSIDE_6 + DX7_OP_LINE_SPACING_X,DX7_OP_ROW_BOT_1 + DX7_OP_LINE_SPACING_Y,DX7_OP_COL_RHSIDE_6 + DX7_OP_LINE_SPACING_X,DX7_OP_ROW_BOT_2 + DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_6,DX7_OP_ROW_1,DX7_OP_COL_CENTER_6,DX7_OP_ROW_1 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_CENTER_6,DX7_OP_ROW_1 - DX7_OP_LINE_SPACING_Y,DX7_OP_COL_RHSIDE_6 + DX7_OP_LINE_SPACING_X, DX7_OP_ROW_1 - DX7_OP_LINE_SPACING_Y,
	DX7_ALG_LINE,DX7_OP_COL_RHSIDE_6 + DX7_OP_LINE_SPACING_X,DX7_OP_ROW_BOT_1 + DX7_OP_LINE_SPACING_Y,DX7_OP_COL_CENTER_6 ,DX7_OP_ROW_BOT_1 + DX7_OP_LINE_SPACING_Y,
	//COMMON
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_COMMON_ROW,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_COMMON_ROW + DX7_OP_TEXTOFFSET_Y + 2,
	DX7_ALG_STRING_ADD_CHAR,'C',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING,
	//Performance
	DX7_ALG_RECT,DX7_COMMON_COL,DX7_PERFORMANCE_ROW ,DX7_OPERATOR_DIM * 5,DX7_OPERATOR_DIM,
	DX7_ALG_TEXT_LOCATION,DX7_COMMON_COL + DX7_OP_TEXTOFFSET_X,DX7_PERFORMANCE_ROW + DX7_OP_TEXTOFFSET_Y+2,
	DX7_ALG_STRING_ADD_CHAR,'P',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING_ADD_CHAR,'r',
	DX7_ALG_STRING_ADD_CHAR,'f',
	DX7_ALG_STRING_ADD_CHAR,'o',
	DX7_ALG_STRING_ADD_CHAR,'m',
	DX7_ALG_STRING_ADD_CHAR,'a',
	DX7_ALG_STRING_ADD_CHAR,'n',
	DX7_ALG_STRING_ADD_CHAR,'c',
	DX7_ALG_STRING_ADD_CHAR,'e',
	DX7_ALG_STRING,
	-1
};

int* AlgDrawData[32] = {
	&DrawDataAlg_1[0],
	& DrawDataAlg_2[0],
	& DrawDataAlg_3[0],
	& DrawDataAlg_4[0],
	& DrawDataAlg_5[0],
	& DrawDataAlg_6[0],
	& DrawDataAlg_7[0],
	& DrawDataAlg_8[0],
	& DrawDataAlg_9[0],
	& DrawDataAlg_10[0],
	& DrawDataAlg_11[0],
	& DrawDataAlg_12[0],
	& DrawDataAlg_13[0],
	& DrawDataAlg_14[0],
	& DrawDataAlg_15[0],
	& DrawDataAlg_16[0],
	& DrawDataAlg_17[0],
	& DrawDataAlg_18[0],
	& DrawDataAlg_19[0],
	& DrawDataAlg_20[0],
	& DrawDataAlg_21[0],
	& DrawDataAlg_22[0],
	& DrawDataAlg_23[0],
	& DrawDataAlg_24[0],
	& DrawDataAlg_25[0],
	& DrawDataAlg_26[0],
	& DrawDataAlg_27[0],
	& DrawDataAlg_28[0],
	& DrawDataAlg_29[0],
	& DrawDataAlg_30[0],
	& DrawDataAlg_31[0],
	& DrawDataAlg_32[0],
};



int lutAlgBitmapIDs[32] = {
	IDB_DX7_ALG01,
	IDB_DX7_ALG2,
	IDB_DX7_ALG03,
	IDB_DX7_ALG04,
	IDB_DX7_ALG05,
	IDB_DX7_ALG06,
	IDB_DX7_ALG07,
	IDB_DX7_ALG08,
	IDB_DX7_ALG09,
	IDB_DX7_ALG10,
	IDB_DX7_ALG11,
	IDB_DX7_ALG12,
	IDB_DX7_ALG13,
	IDB_DX7_ALG14,
	IDB_DX7_ALG15,
	IDB_DX7_ALG16,
	IDB_DX7_ALG17,
	IDB_DX7_ALG18,
	IDB_DX7_ALG19,
	IDB_DX7_ALG20,
	IDB_DX7_ALG21,
	IDB_DX7_ALG22,
	IDB_DX7_ALG23,
	IDB_DX7_ALG24,
	IDB_DX7_ALG25,
	IDB_DX7_ALG26,
	IDB_DX7_ALG27,
	IDB_DX7_ALG28,
	IDB_DX7_ALG29,
	IDB_DX7_ALG30,
	IDB_DX7_ALG31,
	IDB_Dx7_ALG32
};

// CChildViewYamahaTX816

IMPLEMENT_DYNAMIC(CChildViewYamahaTX816, CChildViewBase)

CChildViewYamahaTX816::CChildViewYamahaTX816()
{
	m_pMidiOut = 0;
	m_pMidiIn = 0;
	m_nCurrnetAlg = 1;
	m_DrawMode = DX7_DRAWMODE_ALG;
}

CChildViewYamahaTX816::~CChildViewYamahaTX816()
{
}


BEGIN_MESSAGE_MAP(CChildViewYamahaTX816, CChildViewBase)
	ON_WM_CREATE()
	ON_WM_LBUTTONDOWN()
	ON_WM_LBUTTONUP()
	ON_WM_MOUSEMOVE()
	ON_WM_ERASEBKGND()
	ON_WM_PAINT()
	ON_BN_CLICKED(DX7_BUTTON_ID_NEXT, &CChildViewYamahaTX816::OnMessageButtonNext)
	ON_BN_CLICKED(DX7_BUTTON_ID_PREV, &CChildViewYamahaTX816::OnMessageButtonPrev)
	ON_BN_CLICKED(DX7_BUTTON_ID_HOME, &CChildViewYamahaTX816::OnMessageButtonHome)
	ON_MESSAGE(WM_MYSCROLLBAR_MSG, &CChildViewYamahaTX816::OnMyOwnScroollbarMessage)
END_MESSAGE_MAP()



// CChildViewYamahaTX816 message handlers

int CChildViewYamahaTX816::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
	if (CWnd::OnCreate(lpCreateStruct) == -1)
		return -1;

	// TODO:  Add your specialized creation code here

	return 0;
}


BOOL CChildViewYamahaTX816::Create(LPCTSTR lpszClassName, LPCTSTR lpszWindowName, DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, UINT nID, CCreateContext* pContext)
{
	// TODO: Add your specialized code here and/or call the base class

	return CWnd::Create(lpszClassName, lpszWindowName, dwStyle, rect, pParentWnd, nID, pContext);
}


void CChildViewYamahaTX816::OnLButtonDown(UINT nFlags, CPoint point)
{
	int Operator;

	switch (m_DrawMode)
	{
	case DX7_DRAWMODE_ALG:
		if ((Operator = MouseInOperatorRect(point)) > 0)
		{
		}
		break;
	case DX7_DRAWMODE_OPERATOR_1:
	case DX7_DRAWMODE_OPERATOR_2:
	case DX7_DRAWMODE_OPERATOR_3:
	case DX7_DRAWMODE_OPERATOR_4:
	case DX7_DRAWMODE_OPERATOR_5:
	case DX7_DRAWMODE_OPERATOR_6:
		break;
	case DX7_DRAWMODE_PERFORMANCE:
		break;
	default:
		break;
	}
	CChildViewBase::OnLButtonDown(nFlags, point);
}


void CChildViewYamahaTX816::OnLButtonUp(UINT nFlags, CPoint point)
{
	int Operator;

	switch (m_DrawMode)
	{
	case DX7_DRAWMODE_ALG:
		if ((Operator = MouseInOperatorRect(point)) > 0)
		{
			switch (Operator)
			{
			case DX7_OPERATOR_1:
				m_DrawMode = DX7_DRAWMODE_OPERATOR_1;
				EnableOperatorControls(1);
				SetOperatorValues(OperatorToIndex(m_DrawMode));
				GetParent()->SetWindowTextW(_T("Operator 1"));
				
				break;
			case DX7_OPERATOR_2:
				m_DrawMode = DX7_DRAWMODE_OPERATOR_2;
				EnableOperatorControls(1);
				SetOperatorValues(OperatorToIndex(m_DrawMode));
				GetParent()->SetWindowTextW(_T("Operator 2"));
				break;
			case DX7_OPERATOR_3:
				m_DrawMode = DX7_DRAWMODE_OPERATOR_3;
				EnableOperatorControls(1);
				SetOperatorValues(OperatorToIndex(m_DrawMode));
				GetParent()->SetWindowTextW(_T("Operator 3"));
				break;
			case DX7_OPERATOR_4:
				m_DrawMode = DX7_DRAWMODE_OPERATOR_4;
				EnableOperatorControls(1);
				SetOperatorValues(OperatorToIndex(m_DrawMode));
				GetParent()->SetWindowTextW(_T("Operator 4"));
				break;
			case DX7_OPERATOR_5:
				m_DrawMode = DX7_DRAWMODE_OPERATOR_5;
				EnableOperatorControls(1);
				SetOperatorValues(OperatorToIndex(m_DrawMode));
				GetParent()->SetWindowTextW(_T("Operator 5"));
				break;
			case DX7_OPERATOR_6:
				m_DrawMode = DX7_DRAWMODE_OPERATOR_6;
				EnableOperatorControls(1);
				SetOperatorValues(OperatorToIndex(m_DrawMode));
				GetParent()->SetWindowTextW(_T("Operator 6"));
				break;
			case DX7_OPERATOR_COMMON:
				m_DrawMode = DX7_DRAWMODE_COMMON;
				EnableCommonControls(1);
				GetParent()->SetWindowTextW(_T("Common To All Operators"));
				break;
			case DX7_PERFORMANCE:
				m_DrawMode = DX7_DRAWMODE_PERFORMANCE;
				EnablePerformanceControls(1);
				GetParent()->SetWindowTextW(_T("Performance Parameters"));
				break;
			default:
				break;
			}
			Invalidate();
		}
		break;
	case DX7_DRAWMODE_OPERATOR_1:
	case DX7_DRAWMODE_OPERATOR_2:
	case DX7_DRAWMODE_OPERATOR_3:
	case DX7_DRAWMODE_OPERATOR_4:
	case DX7_DRAWMODE_OPERATOR_5:
	case DX7_DRAWMODE_OPERATOR_6:
		break;
	case DX7_DRAWMODE_PERFORMANCE:
		break;
	case DX7_DRAWMODE_COMMON:
		break;
	default:
		break;
	}
	CChildViewBase::OnLButtonUp(nFlags, point);
}


void CChildViewYamahaTX816::OnMouseMove(UINT nFlags, CPoint point)
{
	switch (m_DrawMode)
	{
	case DX7_DRAWMODE_ALG:
		break;
	case DX7_DRAWMODE_OPERATOR_1:
	case DX7_DRAWMODE_OPERATOR_2:
	case DX7_DRAWMODE_OPERATOR_3:
	case DX7_DRAWMODE_OPERATOR_4:
	case DX7_DRAWMODE_OPERATOR_5:
	case DX7_DRAWMODE_OPERATOR_6:
		break;
	case DX7_DRAWMODE_PERFORMANCE:
		break;
	default:
		break;
	}
	CChildViewBase::OnMouseMove(nFlags, point);
}


BOOL CChildViewYamahaTX816::OnEraseBkgnd(CDC* pDC)
{
	// TODO: Add your message handler code here and/or call default

	return TRUE;
}


void CChildViewYamahaTX816::OnPaint()
{
	CPaintDC dc(this); // device context for painting
					   // TODO: Add your message handler code here
					   // Do not call CChildViewBase::OnPaint() for painting messages
	OnDraw(&dc);
}

void CChildViewYamahaTX816::OnMessageButtonNext()
{
	m_nCurrnetAlg++;
	if (m_nCurrnetAlg > 32)
		m_nCurrnetAlg = 32;
	GetAlgRectangles(m_nCurrnetAlg);
	Invalidate();
}

void CChildViewYamahaTX816::OnMessageButtonPrev()
{
	m_nCurrnetAlg--;
	if (m_nCurrnetAlg < 1)
		m_nCurrnetAlg = 1;
	GetAlgRectangles(m_nCurrnetAlg);

	Invalidate();
}

void CChildViewYamahaTX816::OnMessageButtonHome()
{
	switch (m_DrawMode)
	{
		case DX7_DRAWMODE_ALG:
			break;
		case DX7_DRAWMODE_OPERATOR_1:
		case DX7_DRAWMODE_OPERATOR_2:
		case DX7_DRAWMODE_OPERATOR_3:
		case DX7_DRAWMODE_OPERATOR_4:
		case DX7_DRAWMODE_OPERATOR_5:
		case DX7_DRAWMODE_OPERATOR_6:
			EnableOperatorControls(0);
			break;
		case DX7_DRAWMODE_COMMON:
			EnableCommonControls(0);
			break;
		case DX7_DRAWMODE_PERFORMANCE:
			EnablePerformanceControls(0);
			break;
		default:
			break;
	}
	Invalidate();
	m_DrawMode = DX7_DRAWMODE_ALG;
}

void CChildViewYamahaTX816::OnInitialUpdate()
{
	CRect rectClient;
	int x, y;

	GetClientRect(&rectClient);
	x = 0;
	y = rectClient.Height()-25;
	m_ButtonHome.Create(_T("<Home>"), 0, CRect(CPoint(x, y), CSize(60, 25)), this, DX7_BUTTON_ID_HOME);
	m_ButtonHome.ShowWindow(1);
	x += 60;
	m_ButtonPrev.Create(_T("<Prev Alg"), 0, CRect(CPoint(x, y), CSize(100, 25)), this, DX7_BUTTON_ID_PREV);
	m_ButtonPrev.ShowWindow(1);
	//------------------------------------------
	
	x += 100;
	m_ButtonNext.Create(_T("Next Alg>"), 0, CRect(CPoint(x, y), CSize(100, 25)), this, DX7_BUTTON_ID_NEXT);
	m_ButtonNext.ShowWindow(1);
	//-------------------------------------
	x += 100;
	m_editVoiceName.Create(	// 10 characters
		WS_CHILD | WS_BORDER | WS_VISIBLE ,
		CRect(CPoint(x, y), CSize(94, 25)),
		this,
		DX7_CONTROL_ID_VOICE_NAME
	);
	m_editVoiceName.LimitText(10);
	//----------------------------------------
	x += 94;
	m_editPerformanceName.Create(
		WS_CHILD | WS_BORDER | WS_VISIBLE | ES_AUTOHSCROLL,
		CRect(CPoint(x, y), CSize(148, 25)),
		this,
		DX7_CONTROL_ID_PERFOMANCE_NAME
	);
	m_editPerformanceName.LimitText(30);
	InitializeOperatorControls();
	InitializeCommonOperatorControls();
	InitializePerformanceControls();
	GetAlgRectangles(m_nCurrnetAlg);
}

void CChildViewYamahaTX816::UpdateColors()
{
}

void CChildViewYamahaTX816::OnDraw(CDC* pDC)
{
	CDC DCm;	//memory device context
	CMyBitmap bm, * pOldBM;
	CRect ClientRect;
	CBrush brushDarkRed;
	CBrush brushDarkGreen;
	CBrush brushDarkYellow;
	CBrush burshDarkOrange;
	CBrush burshDarkPurple;
	
	CBrush bkBrush;
	CFont* oldFont;
	COLORREF oldBKcolor;
	COLORREF oldTextColor;
	CString AlgNumber;
	int mod = 0;

	// Create a Memeory Device Context
	GetClientRect(&ClientRect);
	DCm.CreateCompatibleDC(pDC);
	bm.CreateCompatibleBitmap(pDC, ClientRect.Width(), ClientRect.Height());
	pOldBM = (CMyBitmap*)DCm.SelectObject(&bm);
	//----------- Create Drawing Tools ----
	brushDarkRed.CreateSolidBrush(RGB(192, 0, 0));
	brushDarkGreen.CreateSolidBrush(RGB(0, 255, 0));
	brushDarkYellow.CreateSolidBrush(RGB(255, 255, 0));
	burshDarkOrange.CreateSolidBrush(RGB(255, 128, 0));
	burshDarkPurple.CreateSolidBrush(RGB(192, 0, 192));

	bkBrush.CreateSolidBrush(RGB(0, 0, 64));
	DCm.FillRect(&ClientRect, &bkBrush);
	switch (m_DrawMode)
	{
	case DX7_DRAWMODE_ALG:
		oldBKcolor = DCm.SetBkColor(RGB(0, 0, 0));
		oldTextColor = DCm.SetTextColor(RGB(255, 0, 48));
		oldFont = DCm.SelectObject(&m_fontOperator);
		AlgNumber.Format(_T("%2d"), m_nCurrnetAlg);
		DCm.TextOutW(ClientRect.Width() - DX7_OPERATOR_DIM - 8, 0, AlgNumber);
		DrawAlg(&DCm, m_nCurrnetAlg);
		break;
	case DX7_DRAWMODE_OPERATOR_1:
	case DX7_DRAWMODE_OPERATOR_2:
	case DX7_DRAWMODE_OPERATOR_3:
	case DX7_DRAWMODE_OPERATOR_4:
	case DX7_DRAWMODE_OPERATOR_5:
	case DX7_DRAWMODE_OPERATOR_6:
		oldBKcolor = DCm.SetBkColor(RGB(0, 0, 0));
		oldTextColor = DCm.SetTextColor(RGB(255, 0, 48));
		oldFont = DCm.SelectObject(&m_fontOperator);
		DCm.FillRect(CRect(4, 4, 350, 193), &brushDarkRed);
		DCm.FillRect(CRect(350, 4, 450, 102), &brushDarkGreen);
		DCm.FillRect(CRect(292, 238,494, 333), &brushDarkYellow);
		DCm.FillRect(CRect(4, 193, 292, 333), &burshDarkOrange);
		DCm.FillRect(CRect(292, 193, 494, 240), &burshDarkPurple);
		//this is actually operator number
		AlgNumber.Format(_T("%2d"), m_nCurrnetAlg);
		DCm.TextOutW(ClientRect.Width() - DX7_OPERATOR_DIM - 8, 0, AlgNumber);
		DrawOperatorControls(&DCm);
		DrawBMAlg(&DCm, DX7_SLIDER_COL_3 +16,10+2*DX7_SLIDER_SPACING + 6);
		break;
	case DX7_DRAWMODE_COMMON:
		oldBKcolor = DCm.SetBkColor(RGB(0, 0, 0));
		oldTextColor = DCm.SetTextColor(RGB(255, 0, 48));
		oldFont = DCm.SelectObject(&m_fontOperator);
		DCm.FillRect(CRect(4, 4, 350, 193), &brushDarkRed);
		DCm.FillRect(CRect(4, 193, 350, 333), &burshDarkOrange);
		DCm.FillRect(CRect(350, DX7_SLIDER_SPACING, DX7_SLIDER_COL_4, 5 * DX7_SLIDER_SPACING), &brushDarkGreen);
		AlgNumber.Format(_T("%2d"), m_nCurrnetAlg);
		DCm.TextOutW(ClientRect.Width() - DX7_OPERATOR_DIM - 8, 0, AlgNumber);
		DrawCommonControls(&DCm);
		DrawBMAlg(&DCm, DX7_SLIDER_COL_3 + 16, 10 + 5 * DX7_SLIDER_SPACING + 6);
		break;
	case DX7_DRAWMODE_PERFORMANCE:
		oldBKcolor = DCm.SetBkColor(RGB(0, 0, 0));
		oldTextColor = DCm.SetTextColor(RGB(255, 0, 48));
		oldFont = DCm.SelectObject(&m_fontFrequency);
		DCm.TextOutW(
			DX7_SLIDER_COL_2 + 14,
			DX7_ROW_4 - 20,
			_T("Bias")
		);
		DCm.TextOutW(
			DX7_SLIDER_COL_2 + 18,
			DX7_ROW_4 - 40,
			_T("EG")
		);
		DCm.TextOutW(
			DX7_SLIDER_COL_2 + DX7_CB_SPACING + 18,
			DX7_ROW_4 - 20,
			_T("AM")
		);
		DCm.TextOutW(
			DX7_SLIDER_COL_2 + 2 * DX7_CB_SPACING + 18,
			DX7_ROW_4 - 20,
			_T("PM")
		);
		DrawPerformanceControls(&DCm);
		break;
	default:
		oldBKcolor = DCm.SetBkColor(RGB(0, 0, 0));
		oldTextColor = DCm.SetTextColor(RGB(255, 0, 48));
		oldFont = DCm.SelectObject(&m_fontOperator);
		break;
	}
	pDC->BitBlt(
		ClientRect.left,
		ClientRect.top,
		ClientRect.Width(),
		ClientRect.Height(),
		&DCm,
		0,
		0,
		SRCCOPY
	);
	DCm.SetBkColor(oldBKcolor);
	DCm.SetTextColor(oldTextColor);
	DCm.SelectObject(pOldBM);
	DCm.SelectObject(oldFont);
	DCm.DeleteDC();
}

void CChildViewYamahaTX816::DrawAlg(CDC* pDC, int alg)
{
	int ObjIndex = 0;
	int Obj = 0;
	COLORREF Color1 = 0, Color2 = 0, bkColor = 0, textColor = 0;
	COLORREF oldColor1 = 0;
	COLORREF oldColor2 = 0;
	CRect* pRect = 0;
	CBrush* pBrush = 0, *pOldBrush = 0;
	CPen* pPen = 0, *pOldPen = 0;
	int x, y, cx, cy, x2, y2;
	x = y = cx = cy = 0;
	x2 = y2 = 0;
	char* s = new char[256];	// CHARS to display
	int StringIndex = 0;
	CFont* pOldFont;

	alg--;
	while ((Obj = AlgDrawData[alg][ObjIndex++]) != -1)
	{
		switch (Obj)
		{
			case DX7_ALG_RECT:		//Point x:y Size cx:cy
				x = AlgDrawData[alg][ObjIndex++];
				y = AlgDrawData[alg][ObjIndex++];
				cx = AlgDrawData[alg][ObjIndex++];
				cy = AlgDrawData[alg][ObjIndex++];
				pRect = new CRect(CPoint(x, y), CSize(cx, cy));
				pBrush = new CBrush;
				pBrush->CreateSolidBrush(Color2);
				pPen = new CPen;
				pPen->CreatePen(PS_SOLID, 2, Color1);
				pOldBrush = pDC->SelectObject(pBrush);
				pOldPen = pDC->SelectObject(pPen);
				pDC->Rectangle(pRect);
				pDC->SelectObject(pOldPen);
				pDC->SelectObject(pOldPen);
				delete pPen;
				delete pBrush;
				delete pRect;
				pPen = 0;
				pBrush = 0;
				pRect = 0;
				break;
			case DX7_ALG_RECT_LINE_COLOR:
				Color1 = (COLORREF)AlgDrawData[alg][ObjIndex++];
				break;
			case DX7_ALG_RECT_FILL_COLOR:
				Color2 = (COLORREF)AlgDrawData[alg][ObjIndex++];
				break;
			case DX7_ALG_TEXT_LOCATION:
				x = AlgDrawData[alg][ObjIndex++];
				y = AlgDrawData[alg][ObjIndex++];;
				break;
			case DX7_ALG_TEXT_COLOR:
				textColor = (COLORREF)AlgDrawData[alg][ObjIndex++];
				break;
			case DX7_ALG_TEXT_CHARACTER:
				s[0] = AlgDrawData[alg][ObjIndex++];;
				s[1] = 0;
				pOldFont = pDC->SelectObject(&m_fontOperator);
				oldColor1 = pDC->SetTextColor(textColor);
				oldColor2 = pDC->SetBkColor(bkColor);
				pDC->TextOutW(x, y, CString(s));
				pDC->SetTextColor(oldColor1);
				pDC->SetBkColor(oldColor2);
				pDC->SelectObject(pOldFont);
				break;
			case DX7_ALG_STRING_ADD_CHAR:
				s[StringIndex++] = AlgDrawData[alg][ObjIndex++];;
				break;
			case DX7_ALG_STRING:
				s[StringIndex] = 0;
				pOldFont = pDC->SelectObject(&m_fontOperator);
				oldColor1 = pDC->SetTextColor(textColor);
				oldColor2 = pDC->SetBkColor(bkColor);
				pDC->TextOutW(x, y, CString(s));
				pDC->SetTextColor(oldColor1);
				pDC->SetBkColor(oldColor2);
				pDC->SelectObject(pOldFont);
				StringIndex = 0;
				break;
			case DX7_ALG_LINE:				//Point1 x:y  Point2 x:y
				x = AlgDrawData[alg][ObjIndex++];
				y = AlgDrawData[alg][ObjIndex++];
				x2 = AlgDrawData[alg][ObjIndex++];
				y2 = AlgDrawData[alg][ObjIndex++];
				pPen = new CPen;
				pPen->CreatePen(PS_SOLID, 3, Color1);
				pOldPen = pDC->SelectObject(pPen);
				pDC->MoveTo(x, y);
				pDC->LineTo(x2, y2);
				pDC->SelectObject(pOldPen);
				break;
			case DX7_ALG_LINE_COLOR:
				Color1 = AlgDrawData[alg][ObjIndex++];
				break;
			case DX7_ALG_BACKGROUND_COLOR:
				bkColor = AlgDrawData[alg][ObjIndex++];
				break;
			default:
				printf("Boo-Boo\n");
				break;
		}
	}
	delete[] s;
}

void CChildViewYamahaTX816::DrawOperatorControls(CDC* pDC)
{
	CString csFreq;
	CFont* pOldFont;

	m_sliderEGSeg1Rate.Draw(pDC);
	m_sliderEGSeg2Rate.Draw(pDC); 
	m_sliderEGSeg3Rate.Draw(pDC); 
	m_sliderEGSeg4Rate.Draw(pDC);
	m_sliderEGSeg1Level.Draw(pDC);
	m_sliderEGSeg2Level.Draw(pDC);
	m_sliderEGSeg3Level.Draw(pDC);
	m_sliderEGSeg4Level.Draw(pDC);
	m_sliderKeyboardLevelScalingBreakPoint.Draw(pDC);
	m_sliderKeyboardLevelScalingLeftDepth.Draw(pDC);
	m_sliderKeyboardLevelScalingRightDepth.Draw(pDC);
	m_sliderKeyboardLevelScalingLeftCurve.Draw(pDC);
	m_sliderKeyboardLevelScalingRightCurve.Draw(pDC);
	m_sliderKeyboardRateScaling.Draw(pDC);
	m_sliderAmplitudeModulationSensitivity.Draw(pDC);
	m_sliderKeyVelocitySensitivity.Draw(pDC);
	m_sliderOscilatorFrequencyFine.Draw(pDC);
	m_sliderOscilatorFrequencyCoarsep.Draw(pDC);
	m_sliderOutputLevel.Draw(pDC);
	m_checkboxOscillatorMode.Draw(pDC);
	//---------------------------------------
	// Draw Oscilator Frequency Text
	//---------------------------------------
	FreqToString(csFreq,
		m_VoiceEditBuffer.m_Operators[OperatorToIndex(m_DrawMode)].m_OscillatorFrequencyCoarse,
		m_VoiceEditBuffer.m_Operators[OperatorToIndex(m_DrawMode)].m_OscillatorFrequencyFine,
		m_VoiceEditBuffer.m_Operators[OperatorToIndex(m_DrawMode)].m_OscillatorMode
	);
	pOldFont = pDC->SelectObject(&m_fontFrequency);
	pDC->TextOutW(DX7_FREQ_DISPLAY_X, DX7_FREQ_DISPLAY_Y, csFreq);
	pDC->SelectObject(pOldFont);
}

void CChildViewYamahaTX816::GetAlgRectangles(int alg)
{
	int* pAlgData;
	int RectIndex = 0;
	int x, y, cx, cy;

	alg--;
	pAlgData = AlgDrawData[alg];
	while (RectIndex < 8)
	{
		if (*pAlgData++ == DX7_ALG_RECT)
		{
			x = *pAlgData++;
			y = *pAlgData++;
			cx = *pAlgData++;
			cy = *pAlgData++;
			m_rectOperatpr[RectIndex++] = CRect(
				CPoint(x, y),
				CSize(cx, cy)
			);
		}
	}
}

int CChildViewYamahaTX816::MouseInOperatorRect(CPoint pt)
{
	int rv = 0;
	int i;
	int loop = 1;

	for ( i = 0; (i < 8) && loop; i++)
	{
		if (m_rectOperatpr[i].PtInRect(pt))
		{
			rv = i + 1;
			loop = 0;
		}
	}
	return rv;
}

void CChildViewYamahaTX816::EnableOperatorControls(int enableflag)
{
	m_sliderEGSeg1Rate.EnableWindow(enableflag);
	m_sliderEGSeg2Rate.EnableWindow(enableflag);
	m_sliderEGSeg3Rate.EnableWindow(enableflag);
	m_sliderEGSeg4Rate.EnableWindow(enableflag);
	m_sliderEGSeg1Level.EnableWindow(enableflag);
	m_sliderEGSeg2Level.EnableWindow(enableflag);
	m_sliderEGSeg3Level.EnableWindow(enableflag);
	m_sliderEGSeg4Level.EnableWindow(enableflag);
	m_sliderKeyboardLevelScalingBreakPoint.EnableWindow(enableflag);
	m_sliderKeyboardLevelScalingRightDepth.EnableWindow(enableflag);
	m_sliderKeyboardLevelScalingLeftDepth.EnableWindow(enableflag);
	m_sliderKeyboardLevelScalingLeftCurve.EnableWindow(enableflag);
	m_sliderKeyboardLevelScalingRightCurve.EnableWindow(enableflag);
	m_sliderKeyboardRateScaling.EnableWindow(enableflag);
	m_sliderAmplitudeModulationSensitivity.EnableWindow(enableflag);
	m_sliderKeyVelocitySensitivity.EnableWindow(enableflag);
	m_sliderOscilatorFrequencyFine.EnableWindow(enableflag);
	m_sliderOscilatorFrequencyCoarsep.EnableWindow(enableflag);
	m_sliderOutputLevel.EnableWindow(enableflag);
	m_checkboxOscillatorMode.EnableWindow(enableflag);
}

void CChildViewYamahaTX816::DrawPerformanceControls(CDC* pDC)
{
	m_sliderMidiChannelSlect.Draw(pDC);	// 1->16
	m_checkPolyMono.Draw(pDC);	// mono poly
	m_sliderPitchBendRange.Draw(pDC);	//0->12
	m_sliderPitchBendStep.Draw(pDC);		//0->12
	m_sliderPortamentoTime.Draw(pDC);	//0->99
	m_checkPortamentoGlisando.Draw(pDC);	//on-off
	m_checkPortamentoMode.Draw(pDC);		//retain follow

	m_sliderModulationWheelSensitivity.Draw(pDC);	//0->15
	m_checkModulationWheelAssignEGBias.Draw(pDC);	//on-off
	m_checkModulationWheelAssignAmplitude.Draw(pDC);//on-off
	m_checkModulationWheelAssignPitch.Draw(pDC);	//on-off

	m_sliderFootControllerSensitivity.Draw(pDC);	//0->15
	m_checkFootControllerAssignEGBias.Draw(pDC);	//on-off
	m_checkFootControllerAssignAmplitude.Draw(pDC);	//on-off
	m_checkFootControllerAssignPitch.Draw(pDC);	//on-off

	m_sliderAfterTouchSensitivity.Draw(pDC);	//0->15
	m_checkAfterTouchAssignEGBias.Draw(pDC);	//on-off
	m_checkAfterTouchAssignAmplitude.Draw(pDC);	//on-off
	m_checkAfterTouchAssignPitch.Draw(pDC);	//on-off

	m_sliderBreathControllerSensitivity.Draw(pDC);	//0->15
	m_checkBreathControllerAssignEGBias.Draw(pDC);	//on-off
	m_checkBreathControllerAssignAmplitude.Draw(pDC);	//on-off
	m_checkBreathControllerAssignPitch.Draw(pDC);	//on-off

	m_sliderMasterTuning.Draw(pDC);
}

void CChildViewYamahaTX816::DrawCommonControls(CDC* pDC)
{
	m_sliderEGPitchRate_1.Draw(pDC);	//0->99
	m_sliderEGPitchRate_2.Draw(pDC);	//0->99
	m_sliderEGPitchRate_3.Draw(pDC);	//0->99
	m_sliderEGPitchRate_4.Draw(pDC);	//0->99
	m_sliderEGPitchLevel_1.Draw(pDC);	//0->99
	m_sliderEGPitchLevel_2.Draw(pDC);	//0->99
	m_sliderEGPitchLevel_3.Draw(pDC);	//0->99
	m_sliderEGPitchLevel_4.Draw(pDC);	//0->99
	m_sliderFeedback.Draw(pDC);	//0->7
	m_checkOscillatorKeySync.Draw(pDC);	//TRUE FALSE
	m_sliderLFOSpeed.Draw(pDC);	//0->99
	m_sliderLFODelay.Draw(pDC);	//0->99
	m_sliderLFOPitchModulationDepth.Draw(pDC);	//0->99
	m_sliderLFOAmplitudeModulationDepth.Draw(pDC);	//0->9
	m_checkboxLFOKeySync.Draw(pDC);//true false
	m_sliderLFOWaveForm.Draw(pDC);	//0->5
	m_sliderLFOPitchModulationSensitivity.Draw(pDC);	//0->7
	m_sliderTranspose.Draw(pDC);	//0->48
}

void CChildViewYamahaTX816::EnablePerformanceControls(int enableflag)
{
	m_sliderMidiChannelSlect.EnableWindow(enableflag);	// 1->16
	m_checkPolyMono.EnableWindow(enableflag);	// mono poly
	m_sliderPitchBendRange.EnableWindow(enableflag);	//0->12
	m_sliderPitchBendStep.EnableWindow(enableflag);		//0->12
	m_sliderPortamentoTime.EnableWindow(enableflag);	//0->99
	m_checkPortamentoGlisando.EnableWindow(enableflag);	//on-off
	m_checkPortamentoMode.EnableWindow(enableflag);		//retain follow

	m_sliderModulationWheelSensitivity.EnableWindow(enableflag);	//0->15
	m_checkModulationWheelAssignEGBias.EnableWindow(enableflag);	//on-off
	m_checkModulationWheelAssignAmplitude.EnableWindow(enableflag);//on-off
	m_checkModulationWheelAssignPitch.EnableWindow(enableflag);	//on-off

	m_sliderFootControllerSensitivity.EnableWindow(enableflag);	//0->15
	m_checkFootControllerAssignEGBias.EnableWindow(enableflag);	//on-off
	m_checkFootControllerAssignAmplitude.EnableWindow(enableflag);	//on-off
	m_checkFootControllerAssignPitch.EnableWindow(enableflag);	//on-off

	m_sliderAfterTouchSensitivity.EnableWindow(enableflag);	//0->15
	m_checkAfterTouchAssignEGBias.EnableWindow(enableflag);	//on-off
	m_checkAfterTouchAssignAmplitude.EnableWindow(enableflag);	//on-off
	m_checkAfterTouchAssignPitch.EnableWindow(enableflag);	//on-off

	m_sliderBreathControllerSensitivity.EnableWindow(enableflag);	//0->15
	m_checkBreathControllerAssignEGBias.EnableWindow(enableflag);	//on-off
	m_checkBreathControllerAssignAmplitude.EnableWindow(enableflag);	//on-off
	m_checkBreathControllerAssignPitch.EnableWindow(enableflag);	//on-off

	m_sliderMasterTuning.EnableWindow(enableflag);
}

void CChildViewYamahaTX816::EnableCommonControls(int enableflag)
{
	m_sliderEGPitchRate_1.EnableWindow(enableflag);	//0->99
	m_sliderEGPitchRate_2.EnableWindow(enableflag);	//0->99
	m_sliderEGPitchRate_3.EnableWindow(enableflag);	//0->99
	m_sliderEGPitchRate_4.EnableWindow(enableflag);	//0->99
	m_sliderEGPitchLevel_1.EnableWindow(enableflag);	//0->99
	m_sliderEGPitchLevel_2.EnableWindow(enableflag);	//0->99
	m_sliderEGPitchLevel_3.EnableWindow(enableflag);	//0->99
	m_sliderEGPitchLevel_4.EnableWindow(enableflag);	//0->99
	m_sliderFeedback.EnableWindow(enableflag);	//0->7
	m_checkOscillatorKeySync.EnableWindow(enableflag);	//TRUE FALSE
	m_sliderLFOSpeed.EnableWindow(enableflag);	//0->99
	m_sliderLFODelay.EnableWindow(enableflag);	//0->99
	m_sliderLFOPitchModulationDepth.EnableWindow(enableflag);	//0->99
	m_sliderLFOAmplitudeModulationDepth.EnableWindow(enableflag);	//0->9
	m_checkboxLFOKeySync.EnableWindow(enableflag);//true false
	m_sliderLFOWaveForm.EnableWindow(enableflag);	//0->5
	m_sliderLFOPitchModulationSensitivity.EnableWindow(enableflag);	//0->7
	m_sliderTranspose.EnableWindow(enableflag);	//0->48
}

void CChildViewYamahaTX816::InitializeOperatorControls()
{
	int FontLogicalUnits;
	CRect rect;
	GetClientRect(&rect);
	PrintRec("Client Rectangle", rect);
	FontLogicalUnits = (GETAPP->FontPixelsToLogicalUnits(GetDC(), DX7_OPERATOR_DIM) * 65) / 100;
	m_fontOperator.CreateFontW(
		FontLogicalUnits,
		0,
		0,
		0,
		FW_DONTCARE,
		FALSE,
		FALSE,
		FALSE,
		ANSI_CHARSET,
		OUT_DEFAULT_PRECIS,
		CLIP_DEFAULT_PRECIS,
		DRAFT_QUALITY,
		DEFAULT_PITCH,
		_T("Courier")
	);
	FontLogicalUnits = (GETAPP->FontPixelsToLogicalUnits(GetDC(), 16) * 65) / 100;
	m_fontFrequency.CreateFontW(
		FontLogicalUnits,
		0,
		0,
		0,
		FW_DONTCARE,
		FALSE,
		FALSE,
		FALSE,
		ANSI_CHARSET,
		OUT_DEFAULT_PRECIS,
		CLIP_DEFAULT_PRECIS,
		DRAFT_QUALITY,
		DEFAULT_PITCH,
		_T("Arial")
	);

	//-------------------------------------
	// Operator Controls
	//-------------------------------------
	// Enbelope Generator
	//-------------------------------------
	m_sliderEGSeg1Rate.Create(
		CPoint(DX7_SLIDER_COL_1, 10),	//origin 1
		16,		//slider height 2
		10,		//slider arrow width 3
		100,	//track width 4
		5,		//track height 5
		10,		//Thumb width 6
		11,		//height of end tics 7
		9,	//height of the middle tick 8
		7,	//major tick marks height 9
		10,	//Increment of Major Ticks 10
		4,	//Tick Height of the other ticks 11
		5,//Spacing between all tics 12
		100 / 5,//Number of ticks marks on scale 13
		CSize(30, 20),	//size of display area 14
		8,	//spacing between slider and display 15
		CSize(6, 3),	//margin between displaytext and box
		this,	//parent
		RGB(128, 0, 128),	//track color
		RGB(255, 0, 0),		//Arrown Box Color
		RGB(0, 255, 0),		//Arrow Color
		RGB(0, 68, 128),	//Thumb Color
		RGB(255, 255, 255),	//Thumb indicator
		RGB(255, 255, 255),	//Thumb indicator line
		RGB(32, 0, 64),	//background color of slider
		RGB(32, 80, 64),	//text and display rect color
		RGB(255, 128, 192),	//color of the text
		0,	// Minimum Value
		99,	// Maximum Value
		DX7_CONTROL_ID_EG_SEGMENT_RATE_1,// Control ID
		WM_MYSCROLLBAR_MSG,	//scroll bar message
		0,	//number of bitmaps
		MYOWNSLIDER_STYLE_TEXT | MYOWNSLIDER_STYLE_TICKS,	// Style of slider
		_T("   Set 1 Rate   "),	//name of the control
		12	//height of the caption
	);
	m_sliderEGSeg1Rate.EnableWindow(0);
	//------------------------------------------------------
	m_sliderEGSeg2Rate.Create(
		CPoint(DX7_SLIDER_COL_1, 10+ DX7_SLIDER_SPACING),	//origin 1
		16,		//slider height 2
		10,		//slider arrow width 3
		100,	//track width 4
		5,		//track height 5
		10,		//Thumb width 6
		11,		//height of end tics 7
		9,	//height of the middle tick 8
		7,	//major tick marks height 9
		10,	//Increment of Major Ticks 10
		4,	//Tick Height of the other ticks 11
		5,//Spacing between all tics 12
		100 / 5,//Number of ticks marks on scale 13
		CSize(30, 20),	//size of display area 14
		8,	//spacing between slider and display 15
		CSize(6, 3),	//margin between displaytext and box
		this,	//parent
		RGB(128, 0, 128),	//track color
		RGB(255, 0, 0),		//Arrown Box Color
		RGB(0, 255, 0),		//Arrow Color
		RGB(0, 68, 128),	//Thumb Color
		RGB(255, 255, 255),	//Thumb indicator
		RGB(255, 255, 255),	//Thumb indicator line
		RGB(32, 0, 64),	//background color of slider
		RGB(32, 80, 64),	//text and display rect color
		RGB(255, 128, 192),	//color of the text
		0,	// Minimum Value
		99,	// Maximum Value
		DX7_CONTROL_ID_EG_SEGMENT_RATE_2,// Control ID
		WM_MYSCROLLBAR_MSG,	//scroll bar message
		0,	//number of bitmaps
		MYOWNSLIDER_STYLE_TEXT | MYOWNSLIDER_STYLE_TICKS,	// Style of slider
		_T("   Seg 2 Rate   "),	//name of the control
		12	//height of the caption
	);
	m_sliderEGSeg2Rate.EnableWindow(0);
	//----------------------------------------------
	m_sliderEGSeg3Rate.Create(
		CPoint(DX7_SLIDER_COL_1, 10 + 2* DX7_SLIDER_SPACING),	//origin 1
		16,		//slider height 2
		10,		//slider arrow width 3
		100,	//track width 4
		5,		//track height 5
		10,		//Thumb width 6
		11,		//height of end tics 7
		9,	//height of the middle tick 8
		7,	//major tick marks height 9
		10,	//Increment of Major Ticks 10
		4,	//Tick Height of the other ticks 11
		5,//Spacing between all tics 12
		100 / 5,//Number of ticks marks on scale 13
		CSize(30, 20),	//size of display area 14
		8,	//spacing between slider and display 15
		CSize(6, 3),	//margin between displaytext and box
		this,	//parent
		RGB(128, 0, 128),	//track color
		RGB(255, 0, 0),		//Arrown Box Color
		RGB(0, 255, 0),		//Arrow Color
		RGB(0, 68, 128),	//Thumb Color
		RGB(255, 255, 255),	//Thumb indicator
		RGB(255, 255, 255),	//Thumb indicator line
		RGB(32, 0, 64),	//background color of slider
		RGB(32, 80, 64),	//text and display rect color
		RGB(255, 128, 192),	//color of the text
		0,	// Minimum Value
		99,	// Maximum Value
		DX7_CONTROL_ID_EG_SEGMENT_RATE_3,// Control ID
		WM_MYSCROLLBAR_MSG,	//scroll bar message
		0,	//number of bitmaps
		MYOWNSLIDER_STYLE_TEXT | MYOWNSLIDER_STYLE_TICKS,	// Style of slider
		_T("   Seg 3 Rate   "),	//name of the control
		12	//height of the caption
	);
	m_sliderEGSeg3Rate.EnableWindow(0);
	//----------------------------------------
	m_sliderEGSeg4Rate.Create(
		CPoint(DX7_SLIDER_COL_1, 10 + 3 * DX7_SLIDER_SPACING),	//origin 1
		16,		//slider height 2
		10,		//slider arrow width 3
		100,	//track width 4
		5,		//track height 5
		10,		//Thumb width 6
		11,		//height of end tics 7
		9,	//height of the middle tick 8
		7,	//major tick marks height 9
		10,	//Increment of Major Ticks 10
		4,	//Tick Height of the other ticks 11
		5,//Spacing between all tics 12
		100 / 5,//Number of ticks marks on scale 13
		CSize(30, 20),	//size of display area 14
		8,	//spacing between slider and display 15
		CSize(6, 3),	//margin between displaytext and box
		this,	//parent
		RGB(128, 0, 128),	//track color
		RGB(255, 0, 0),		//Arrown Box Color
		RGB(0, 255, 0),		//Arrow Color
		RGB(0, 68, 128),	//Thumb Color
		RGB(255, 255, 255),	//Thumb indicator
		RGB(255, 255, 255),	//Thumb indicator line
		RGB(32, 0, 64),	//background color of slider
		RGB(32, 80, 64),	//text and display rect color
		RGB(255, 128, 192),	//color of the text
		0,	// Minimum Value
		99,	// Maximum Value
		DX7_CONTROL_ID_EG_SEGMENT_RATE_4,// Control ID
		WM_MYSCROLLBAR_MSG,	//scroll bar message
		0,	//number of bitmaps
		MYOWNSLIDER_STYLE_TEXT | MYOWNSLIDER_STYLE_TICKS,	// Style of slider
		_T("   Seg 4 Rate   "),	//name of the control
		12	//height of the caption
	);
	m_sliderEGSeg4Rate.EnableWindow(0);
	//--------------------------------------
	m_sliderEGSeg1Level.Create(
		CPoint(DX7_SLIDER_COL_2, 10),	//origin 1
		16,		//slider height 2
		10,		//slider arrow width 3
		100,	//track width 4
		5,		//track height 5
		10,		//Thumb width 6
		11,		//height of end tics 7
		9,	//height of the middle tick 8
		7,	//major tick marks height 9
		10,	//Increment of Major Ticks 10
		4,	//Tick Height of the other ticks 11
		5,//Spacing between all tics 12
		100 / 5,//Number of ticks marks on scale 13
		CSize(30, 20),	//size of display area 14
		8,	//spacing between slider and display 15
		CSize(6, 3),	//margin between displaytext and box
		this,	//parent
		RGB(128, 0, 128),	//track color
		RGB(255, 0, 0),		//Arrown Box Color
		RGB(0, 255, 0),		//Arrow Color
		RGB(0, 68, 128),	//Thumb Color
		RGB(255, 255, 255),	//Thumb indicator
		RGB(255, 255, 255),	//Thumb indicator line
		RGB(32, 0, 64),	//background color of slider
		RGB(32, 80, 64),	//text and display rect color
		RGB(255, 128, 192),	//color of the text
		0,	// Minimum Value
		99,	// Maximum Value
		DX7_CONTROL_ID_EG_SEGMENT_LEVEL_1,// Control ID
		WM_MYSCROLLBAR_MSG,	//scroll bar message
		0,	//number of bitmaps
		MYOWNSLIDER_STYLE_TEXT | MYOWNSLIDER_STYLE_TICKS,	// Style of slider
		_T("   Seg 1 Level   "),	//name of the control
		12	//height of the caption
	);
	m_sliderEGSeg1Level.EnableWindow(0);
	//------------------------------------------
	m_sliderEGSeg2Level.Create(
		CPoint(DX7_SLIDER_COL_2, 10 + DX7_SLIDER_SPACING),	//origin 1
		16,		//slider height 2
		10,		//slider arrow width 3
		100,	//track width 4
		5,		//track height 5
		10,		//Thumb width 6
		11,		//height of end tics 7
		9,	//height of the middle tick 8
		7,	//major tick marks height 9
		10,	//Increment of Major Ticks 10
		4,	//Tick Height of the other ticks 11
		5,//Spacing between all tics 12
		100 / 5,//Number of ticks marks on scale 13
		CSize(30, 20),	//size of display area 14
		8,	//spacing between slider and display 15
		CSize(6, 3),	//margin between displaytext and box
		this,	//parent
		RGB(128, 0, 128),	//track color
		RGB(255, 0, 0),		//Arrown Box Color
		RGB(0, 255, 0),		//Arrow Color
		RGB(0, 68, 128),	//Thumb Color
		RGB(255, 255, 255),	//Thumb indicator
		RGB(255, 255, 255),	//Thumb indicator line
		RGB(32, 0, 64),	//background color of slider
		RGB(32, 80, 64),	//text and display rect color
		RGB(255, 128, 192),	//color of the text
		0,	// Minimum Value
		99,	// Maximum Value
		DX7_CONTROL_ID_EG_SEGMENT_LEVEL_2,// Control ID
		WM_MYSCROLLBAR_MSG,	//scroll bar message
		0,	//number of bitmaps
		MYOWNSLIDER_STYLE_TEXT | MYOWNSLIDER_STYLE_TICKS,	// Style of slider
		_T("   Seg 2 Level   "),	//name of the control
		12	//height of the caption
	);
	m_sliderEGSeg2Level.EnableWindow(0);

	m_sliderEGSeg3Level.Create(
		CPoint(DX7_SLIDER_COL_2, 10 + 2 * DX7_SLIDER_SPACING),	//origin 1
		16,		//slider height 2
		10,		//slider arrow width 3
		100,	//track width 4
		5,		//track height 5
		10,		//Thumb width 6
		11,		//height of end tics 7
		9,	//height of the middle tick 8
		7,	//major tick marks height 9
		10,	//Increment of Major Ticks 10
		4,	//Tick Height of the other ticks 11
		5,//Spacing between all tics 12
		100 / 5,//Number of ticks marks on scale 13
		CSize(30, 20),	//size of display area 14
		8,	//spacing between slider and display 15
		CSize(6, 3),	//margin between displaytext and box
		this,	//parent
		RGB(128, 0, 128),	//track color
		RGB(255, 0, 0),		//Arrown Box Color
		RGB(0, 255, 0),		//Arrow Color
		RGB(0, 68, 128),	//Thumb Color
		RGB(255, 255, 255),	//Thumb indicator
		RGB(255, 255, 255),	//Thumb indicator line
		RGB(32, 0, 64),	//background color of slider
		RGB(32, 80, 64),	//text and display rect color
		RGB(255, 128, 192),	//color of the text
		0,	// Minimum Value
		99,	// Maximum Value
		DX7_CONTROL_ID_EG_SEGMENT_LEVEL_3,// Control ID
		WM_MYSCROLLBAR_MSG,	//scroll bar message
		0,	//number of bitmaps
		MYOWNSLIDER_STYLE_TEXT | MYOWNSLIDER_STYLE_TICKS,	// Style of slider
		_T("   Seg 3 Level  "),	//name of the control
		12	//height of the caption
	);
	m_sliderEGSeg3Level.EnableWindow(0);

	m_sliderEGSeg4Level.Create(
		CPoint(DX7_SLIDER_COL_2, 10 + 3 * DX7_SLIDER_SPACING),	//origin 1
		16,		//slider height 2
		10,		//slider arrow width 3
		100,	//track width 4
		5,		//track height 5
		10,		//Thumb width 6
		11,		//height of end tics 7
		9,	//height of the middle tick 8
		7,	//major tick marks height 9
		10,	//Increment of Major Ticks 10
		4,	//Tick Height of the other ticks 11
		5,//Spacing between all tics 12
		100 / 5,//Number of ticks marks on scale 13
		CSize(30, 20),	//size of display area 14
		8,	//spacing between slider and display 15
		CSize(6, 3),	//margin between displaytext and box
		this,	//parent
		RGB(128, 0, 128),	//track color
		RGB(255, 0, 0),		//Arrown Box Color
		RGB(0, 255, 0),		//Arrow Color
		RGB(0, 68, 128),	//Thumb Color
		RGB(255, 255, 255),	//Thumb indicator
		RGB(255, 255, 255),	//Thumb indicator line
		RGB(32, 0, 64),	//background color of slider
		RGB(32, 80, 64),	//text and display rect color
		RGB(255, 128, 192),	//color of the text
		0,	// Minimum Value
		99,	// Maximum Value
		DX7_CONTROL_ID_EG_SEGMENT_LEVEL_4,// Control ID
		WM_MYSCROLLBAR_MSG,	//scroll bar message
		0,	//number of bitmaps
		MYOWNSLIDER_STYLE_TEXT | MYOWNSLIDER_STYLE_TICKS,	// Style of slider
		_T("   Seg 4 Level  "),	//name of the control
		12	//height of the caption
	);
	m_sliderEGSeg4Level.EnableWindow(0);
	//---------------- Level Scaling --------------------
	m_sliderKeyboardLevelScalingBreakPoint.Create(
		CPoint(DX7_SLIDER_COL_1, 10 + 4 * DX7_SLIDER_SPACING),	//origin 1
		16,		//slider height 2
		10,		//slider arrow width 3
		100,	//track width 4
		5,		//track height 5
		10,		//Thumb width 6
		11,		//height of end tics 7
		9,	//height of the middle tick 8
		7,	//major tick marks height 9
		10,	//Increment of Major Ticks 10
		4,	//Tick Height of the other ticks 11
		5,//Spacing between all tics 12
		100 / 5,//Number of ticks marks on scale 13
		CSize(50, 20),	//size of display area 14
		4,	//spacing between slider and display 15
		CSize(6, 3),	//margin between displaytext and box
		this,	//parent
		RGB(128, 0, 128),	//track color
		RGB(255, 0, 0),		//Arrown Box Color
		RGB(0, 255, 0),		//Arrow Color
		RGB(0, 68, 128),	//Thumb Color
		RGB(255, 255, 255),	//Thumb indicator
		RGB(255, 255, 255),	//Thumb indicator line
		RGB(32, 0, 64),	//background color of slider
		RGB(32, 80, 64),	//text and display rect color
		RGB(255, 128, 192),	//color of the text
		21,	// Minimum Value
		120,	// Maximum Value
		DX7_CONTROL_ID_KEYBOARD_LEVEL_SCALING_BREAKPOINT,// Control ID
		WM_MYSCROLLBAR_MSG,	//scroll bar message
		0,	//number of bitmaps
		MYOWNSLIDER_STYLE_STRING_TABLE | MYOWNSLIDER_STYLE_TICKS,	// Style of slider
		_T("Level scaling BP"),	//name of the control
		12	//height of the caption
	);
	m_sliderKeyboardLevelScalingBreakPoint.EnableWindow(0);
	m_sliderKeyboardLevelScalingBreakPoint.SetStringTable(MidiNoteToNoteString);
	//-----------------------------------------
	m_sliderKeyboardLevelScalingLeftDepth.Create(
		CPoint(DX7_SLIDER_COL_1, 10 + 5 * DX7_SLIDER_SPACING),	//origin 1
		16,		//slider height 2
		10,		//slider arrow width 3
		100,	//track width 4
		5,		//track height 5
		10,		//Thumb width 6
		11,		//height of end tics 7
		9,	//height of the middle tick 8
		7,	//major tick marks height 9
		10,	//Increment of Major Ticks 10
		4,	//Tick Height of the other ticks 11
		5,//Spacing between all tics 12
		100 / 5,//Number of ticks marks on scale 13
		CSize(30, 20),	//size of display area 14
		8,	//spacing between slider and display 15
		CSize(6, 3),	//margin between displaytext and box
		this,	//parent
		RGB(128, 0, 128),	//track color
		RGB(255, 0, 0),		//Arrown Box Color
		RGB(0, 255, 0),		//Arrow Color
		RGB(0, 68, 128),	//Thumb Color
		RGB(255, 255, 255),	//Thumb indicator
		RGB(255, 255, 255),	//Thumb indicator line
		RGB(32, 0, 64),	//background color of slider
		RGB(32, 80, 64),	//text and display rect color
		RGB(255, 128, 192),	//color of the text
		0,	// Minimum Value
		99,	// Maximum Value
		DX7_CONTROL_ID_KEYBOARD_LEVEL_SCALING_LEFT_DEPTH,// Control ID
		WM_MYSCROLLBAR_MSG,	//scroll bar message
		0,	//number of bitmaps
		MYOWNSLIDER_STYLE_TEXT | MYOWNSLIDER_STYLE_TICKS,	// Style of slider
		_T("Lev scal Left"),	//name of the control
		12	//height of the caption
	);
	m_sliderKeyboardLevelScalingLeftDepth.EnableWindow(0);
	//-----------------------------------------------
	m_sliderKeyboardLevelScalingRightDepth.Create(
		CPoint(DX7_SLIDER_COL_1, 10 + 6 * DX7_SLIDER_SPACING),	//origin 1
		16,		//slider height 2
		10,		//slider arrow width 3
		100,	//track width 4
		5,		//track height 5
		10,		//Thumb width 6
		11,		//height of end tics 7
		9,	//height of the middle tick 8
		7,	//major tick marks height 9
		10,	//Increment of Major Ticks 10
		4,	//Tick Height of the other ticks 11
		5,//Spacing between all tics 12
		100 / 5,//Number of ticks marks on scale 13
		CSize(30, 20),	//size of display area 14
		8,	//spacing between slider and display 15
		CSize(6, 3),	//margin between displaytext and box
		this,	//parent
		RGB(128, 0, 128),	//track color
		RGB(255, 0, 0),		//Arrown Box Color
		RGB(0, 255, 0),		//Arrow Color
		RGB(0, 68, 128),	//Thumb Color
		RGB(255, 255, 255),	//Thumb indicator
		RGB(255, 255, 255),	//Thumb indicator line
		RGB(32, 0, 64),	//background color of slider
		RGB(32, 80, 64),	//text and display rect color
		RGB(255, 128, 192),	//color of the text
		0,	// Minimum Value
		99,	// Maximum Value
		DX7_CONTROL_ID_KEYBOARD_LEVEL_SCALING_RIGHT_DEPTH,// Control ID
		WM_MYSCROLLBAR_MSG,	//scroll bar message
		0,	//number of bitmaps
		MYOWNSLIDER_STYLE_TEXT | MYOWNSLIDER_STYLE_TICKS,	// Style of slider
		_T("Lev Scale R Depth"),	//name of the control
		12	//height of the caption
	);
	m_sliderKeyboardLevelScalingRightDepth.EnableWindow(0);
	//----------------------------------------------
	m_sliderKeyboardLevelScalingRightCurve.Create(
		CPoint(DX7_SLIDER_COL_2 + 8, 10 + 4 * DX7_SLIDER_SPACING),	//origin 1
		16,		//slider height 2
		10,		//slider arrow width 3
		3 * 6,	//track width 4
		5,		//track height 5
		10,		//Thumb width 6
		11,		//height of end tics 7
		9,	//height of the middle tick 8
		7,	//major tick marks height 9
		6,	//Increment of Major Ticks 10
		4,	//Tick Height of the other ticks 11
		6,//Spacing between all tics 12
		3,//Number of ticks marks on scale 13
		CSize(50, 20),	//size of display area 14
		8,	//spacing between slider and display 15
		CSize(6, 3),	//margin between displaytext and box
		this,	//parent
		RGB(128, 0, 128),	//track color
		RGB(255, 0, 0),		//Arrown Box Color
		RGB(0, 255, 0),		//Arrow Color
		RGB(0, 68, 128),	//Thumb Color
		RGB(255, 255, 255),	//Thumb indicator
		RGB(255, 255, 255),	//Thumb indicator line
		RGB(32, 0, 64),	//background color of slider
		RGB(32, 80, 64),	//text and display rect color
		RGB(255, 128, 192),	//color of the text
		0,	// Minimum Value
		3,	// Maximum Value
		DX7_CONTROL_ID_KEYBOARD_LEVEL_SCALING_RIGHT_CURVE,// Control ID
		WM_MYSCROLLBAR_MSG,	//scroll bar message
		0,	//number of bitmaps
		MYOWNSLIDER_STYLE_STRING_TABLE | MYOWNSLIDER_STYLE_TICKS,	// Style of slider
		_T("LV Scl R Crv"),	//name of the control
		12	//height of the caption
	);
	m_sliderKeyboardLevelScalingRightCurve.EnableWindow(0);
	m_sliderKeyboardLevelScalingRightCurve.SetStringTable(TX816_OP_KEYBORD_Level_Scaling_Curve);
	//------------------------------------------
	m_sliderKeyboardLevelScalingLeftCurve.Create(
		CPoint(DX7_SLIDER_COL_2+8, 10 + 5 * DX7_SLIDER_SPACING),	//origin 1
		16,		//slider height 2
		10,		//slider arrow width 3
		3 * 6,	//track width 4
		5,		//track height 5
		10,		//Thumb width 6
		11,		//height of end tics 7
		9,	//height of the middle tick 8
		7,	//major tick marks height 9
		6,	//Increment of Major Ticks 10
		4,	//Tick Height of the other ticks 11
		6,//Spacing between all tics 12
		3,//Number of ticks marks on scale 13
		CSize(50, 20),	//size of display area 14
		8,	//spacing between slider and display 15
		CSize(6, 3),	//margin between displaytext and box
		this,	//parent
		RGB(128, 0, 128),	//track color
		RGB(255, 0, 0),		//Arrown Box Color
		RGB(0, 255, 0),		//Arrow Color
		RGB(0, 68, 128),	//Thumb Color
		RGB(255, 255, 255),	//Thumb indicator
		RGB(255, 255, 255),	//Thumb indicator line
		RGB(32, 0, 64),	//background color of slider
		RGB(32, 80, 64),	//text and display rect color
		RGB(255, 128, 192),	//color of the text
		0,	// Minimum Value
		3,	// Maximum Value
		DX7_CONTROL_ID_KEYBOARD_LEVEL_SCALING_LEFT_CURVE,// Control ID
		WM_MYSCROLLBAR_MSG,	//scroll bar message
		0,	//number of bitmaps
		MYOWNSLIDER_STYLE_STRING_TABLE | MYOWNSLIDER_STYLE_TICKS,	// Style of slider
		_T("LV Scl L Crv"),	//name of the control
		12	//height of the caption
	);
	m_sliderKeyboardLevelScalingLeftCurve.EnableWindow(0);
	m_sliderKeyboardLevelScalingLeftCurve.SetStringTable(TX816_OP_KEYBORD_Level_Scaling_Curve);
	//------------------------------------------
	m_sliderKeyboardRateScaling.Create(
		CPoint(DX7_SLIDER_COL_2 + 8, 10 + 6 * DX7_SLIDER_SPACING),	//origin 1
		16,		//slider height 2
		10,		//slider arrow width 3
		7 * 5,	//track width 4
		5,		//track height 5
		10,		//Thumb width 6
		11,		//height of end tics 7
		9,	//height of the middle tick 8
		7,	//major tick marks height 9
		5,	//Increment of Major Ticks 10
		4,	//Tick Height of the other ticks 11
		5,//Spacing between all tics 12
		6,//Number of ticks marks on scale 13
		CSize(30, 20),	//size of display area 14
		8,	//spacing between slider and display 15
		CSize(6, 3),	//margin between displaytext and box
		this,	//parent
		RGB(128, 0, 128),	//track color
		RGB(255, 0, 0),		//Arrown Box Color
		RGB(0, 255, 0),		//Arrow Color
		RGB(0, 68, 128),	//Thumb Color
		RGB(255, 255, 255),	//Thumb indicator
		RGB(255, 255, 255),	//Thumb indicator line
		RGB(32, 0, 64),	//background color of slider
		RGB(32, 80, 64),	//text and display rect color
		RGB(255, 128, 192),	//color of the text
		0,	// Minimum Value
		7,	// Maximum Value
		DX7_CONTROL_ID_KEYBOARD_RATE_SCALING,// Control ID
		WM_MYSCROLLBAR_MSG,	//scroll bar message
		0,	//number of bitmaps
		MYOWNSLIDER_STYLE_TEXT | MYOWNSLIDER_STYLE_TICKS,	// Style of slider
		_T("KB rate Slg"),	//name of the control
		12	//height of the caption
	);
	m_sliderKeyboardRateScaling.EnableWindow(0);

	//-------------- Oscilator ------------------
	m_checkboxOscillatorMode.Create(
		CString(_T("Freq Fixed")),	//String to display when checked (TRUE)
		CString(_T("Freq Ratio")),//String to display when unchecked (false)
		CRect(CPoint(DX7_SLIDER_COL_3 + 60, 10 + 5 * DX7_SLIDER_SPACING), CSize(80, DX7_CB_CONTROL_HEIGHT)),	//outline rectangle of control
		this,	//parent of the control
		DX7_CONTROL_ID_OSCILLATOR_MODE,	//ID of the control
		RGB(92, 0, 69),	// background color
		RGB(92, 255, 69),	//color of the box outline
		RGB(92, 128, 10),//color of the check mark
		RGB(92, 255, 255),	//color of the text
		WM_MYSCROLLBAR_MSG	//message to send back to parent
	);
	m_checkboxOscillatorMode.EnableWindow(0);
	//-------------------------------------------------
	m_sliderOscilatorFrequencyFine.Create(
		CPoint(DX7_SLIDER_COL_3 - 50, 10 + 6 * DX7_SLIDER_SPACING),	//origin 1
		16,		//slider height 2
		10,		//slider arrow width 3
		100,	//track width 4
		5,		//track height 5
		10,		//Thumb width 6
		11,		//height of end tics 7
		9,	//height of the middle tick 8
		7,	//major tick marks height 9
		10,	//Increment of Major Ticks 10
		4,	//Tick Height of the other ticks 11
		5,//Spacing between all tics 12
		100 / 5,//Number of ticks marks on scale 13
		CSize(20, 20),	//size of display area 14
		8,	//spacing between slider and display 15
		CSize(6, 3),	//margin between displaytext and box
		this,	//parent
		RGB(128, 0, 128),	//track color
		RGB(255, 0, 0),		//Arrown Box Color
		RGB(0, 255, 0),		//Arrow Color
		RGB(0, 68, 128),	//Thumb Color
		RGB(255, 255, 255),	//Thumb indicator
		RGB(255, 255, 255),	//Thumb indicator line
		RGB(32, 0, 64),	//background color of slider
		RGB(32, 80, 64),	//text and display rect color
		RGB(255, 128, 192),	//color of the text
		0,	// Minimum Value
		99,	// Maximum Value
		DX7_CONTROL_ID_OSCILLATOR_FREQUENCY_FINE,// Control ID
		WM_MYSCROLLBAR_MSG,	//scroll bar message
		0,	//number of bitmaps
		MYOWNSLIDER_STYLE_TEXT | MYOWNSLIDER_STYLE_TICKS,	// Style of slider
		_T("Osc Frq Fine"),	//name of the control
		12	//height of the caption
	);
	m_sliderOscilatorFrequencyFine.EnableWindow(0);
	//----------------------------------------
	m_sliderOscilatorFrequencyCoarsep.Create(
		CPoint(DX7_SLIDER_COL_3 - 50, 10 + 5 * DX7_SLIDER_SPACING),	//origin 1
		16,		//slider height 2
		10,		//slider arrow width 3
		32,	//track width 4
		5,		//track height 5
		10,		//Thumb width 6
		11,		//height of end tics 7
		9,	//height of the middle tick 8
		7,	//major tick marks height 9
		8,	//Increment of Major Ticks 10
		4,	//Tick Height of the other ticks 11
		4,//Spacing between all tics 12
		32 / 4,//Number of ticks marks on scale 13
		CSize(20, 20),	//size of display area 14
		8,	//spacing between slider and display 15
		CSize(6, 3),	//margin between displaytext and box
		this,	//parent
		RGB(128, 0, 128),	//track color
		RGB(255, 0, 0),		//Arrown Box Color
		RGB(0, 255, 0),		//Arrow Color
		RGB(0, 68, 128),	//Thumb Color
		RGB(255, 255, 255),	//Thumb indicator
		RGB(255, 255, 255),	//Thumb indicator line
		RGB(32, 0, 64),	//background color of slider
		RGB(32, 80, 64),	//text and display rect color
		RGB(255, 128, 192),	//color of the text
		0,	// Minimum Value
		31,	// Maximum Value
		DX7_CONTROL_ID_OSCILLATOR_FREQUENCY_COARSE,// Control ID
		WM_MYSCROLLBAR_MSG,	//scroll bar message
		0,	//number of bitmaps
		MYOWNSLIDER_STYLE_TEXT | MYOWNSLIDER_STYLE_TICKS,	// Style of slider
		_T("Osc Fq Crs"),	//name of the control
		12	//height of the caption

	);
	m_sliderOscilatorFrequencyCoarsep.EnableWindow(0);
	//-------------- Misc --------------------
	m_sliderOutputLevel.Create(
		CPoint(DX7_SLIDER_COL_3 - 50, 10 + 4 * DX7_SLIDER_SPACING),	//origin 1
		16,		//slider height 2
		10,		//slider arrow width 3
		100,	//track width 4
		5,		//track height 5
		10,		//Thumb width 6
		11,		//height of end tics 7
		9,	//height of the middle tick 8
		7,	//major tick marks height 9
		10,	//Increment of Major Ticks 10
		4,	//Tick Height of the other ticks 11
		5,//Spacing between all tics 12
		100/5,//Number of ticks marks on scale 13
		CSize(20, 20),	//size of display area 14
		8,	//spacing between slider and display 15
		CSize(6, 3),	//margin between displaytext and box
		this,	//parent
		RGB(128, 0, 128),	//track color
		RGB(255, 0, 0),		//Arrown Box Color
		RGB(0, 255, 0),		//Arrow Color
		RGB(0, 68, 128),	//Thumb Color
		RGB(255, 255, 255),	//Thumb indicator
		RGB(255, 255, 255),	//Thumb indicator line
		RGB(32, 0, 64),	//background color of slider
		RGB(32, 80, 64),	//text and display rect color
		RGB(255, 128, 192),	//color of the text
		0,	// Minimum Value
		99,	// Maximum Value
		DX7_CONTROL_ID_OPERATOR_OUTPUT_LEVEL,// Control ID
		WM_MYSCROLLBAR_MSG,	//scroll bar message
		0,	//number of bitmaps
		MYOWNSLIDER_STYLE_TEXT | MYOWNSLIDER_STYLE_TICKS,	// Style of slider
		_T("Out Level"),	//name of the control
		12	//height of the caption
	);
	m_sliderOutputLevel.EnableWindow(0);
	//------------------------------------------------
	m_sliderAmplitudeModulationSensitivity.Create(
		CPoint(DX7_SLIDER_COL_3 + 8, 10),	//origin 1
		16,		//slider height 2
		10,		//slider arrow width 3
		3 * 5,	//track width 4
		5,		//track height 5
		10,		//Thumb width 6
		11,		//height of end tics 7
		9,	//height of the middle tick 8
		7,	//major tick marks height 9
		5,	//Increment of Major Ticks 10
		4,	//Tick Height of the other ticks 11
		5,//Spacing between all tics 12
		3,//Number of ticks marks on scale 13
		CSize(20, 20),	//size of display area 14
		8,	//spacing between slider and display 15
		CSize(6, 3),	//margin between displaytext and box
		this,	//parent
		RGB(128, 0, 128),	//track color
		RGB(255, 0, 0),		//Arrown Box Color
		RGB(0, 255, 0),		//Arrow Color
		RGB(0, 68, 128),	//Thumb Color
		RGB(255, 255, 255),	//Thumb indicator
		RGB(255, 255, 255),	//Thumb indicator line
		RGB(32, 0, 64),	//background color of slider
		RGB(32, 80, 64),	//text and display rect color
		RGB(255, 128, 192),	//color of the text
		0,	// Minimum Value
		3,	// Maximum Value
		DX7_CONTROL_ID_AMPLITUDE_MODULATION_SENSITIVITY,// Control ID
		WM_MYSCROLLBAR_MSG,	//scroll bar message
		0,	//number of bitmaps
		MYOWNSLIDER_STYLE_TEXT | MYOWNSLIDER_STYLE_TICKS,	// Style of slider
		_T("AM Snstvty"),	//name of the control
		12	//height of the caption
	);
	m_sliderAmplitudeModulationSensitivity.EnableWindow(0);
	//---------------------------------------
	m_sliderKeyVelocitySensitivity.Create(
		CPoint(DX7_SLIDER_COL_3 + 8, 10 + DX7_SLIDER_SPACING),	//origin 1
		16,		//slider height 2
		10,		//slider arrow width 3
		7 * 5,	//track width 4
		5,		//track height 5
		10,		//Thumb width 6
		11,		//height of end tics 7
		9,	//height of the middle tick 8
		7,	//major tick marks height 9
		5,	//Increment of Major Ticks 10
		4,	//Tick Height of the other ticks 11
		5,//Spacing between all tics 12
		6,//Number of ticks marks on scale 13
		CSize(20, 20),	//size of display area 14
		8,	//spacing between slider and display 15
		CSize(6, 3),	//margin between displaytext and box
		this,	//parent
		RGB(128, 0, 128),	//track color
		RGB(255, 0, 0),		//Arrown Box Color
		RGB(0, 255, 0),		//Arrow Color
		RGB(0, 68, 128),	//Thumb Color
		RGB(255, 255, 255),	//Thumb indicator
		RGB(255, 255, 255),	//Thumb indicator line
		RGB(32, 0, 64),	//background color of slider
		RGB(32, 80, 64),	//text and display rect color
		RGB(255, 128, 192),	//color of the text
		0,	// Minimum Value
		7,	// Maximum Value
		DX7_CONTROL_ID_KEY_VELOCITY_SENSITIVITY,// Control ID
		WM_MYSCROLLBAR_MSG,	//scroll bar message
		0,	//number of bitmaps
		MYOWNSLIDER_STYLE_TEXT | MYOWNSLIDER_STYLE_TICKS,	// Style of slider
		_T("Key Vel Sen"),	//name of the control
		12	//height of the caption
	);
	m_sliderKeyVelocitySensitivity.EnableWindow(0);

	//------------------------------------------------------

}

void CChildViewYamahaTX816::InitializeCommonOperatorControls()
{
	m_sliderEGPitchRate_1.Create(	//0->99
		CPoint(DX7_SLIDER_COL_1, 10),	//origin 1
		16,		//slider height 2
		10,		//slider arrow width 3
		100,	//track width 4
		5,		//track height 5
		10,		//Thumb width 6
		11,		//height of end tics 7
		9,	//height of the middle tick 8
		7,	//major tick marks height 9
		10,	//Increment of Major Ticks 10
		4,	//Tick Height of the other ticks 11
		5,//Spacing between all tics 12
		100 / 5,//Number of ticks marks on scale 13
		CSize(30, 20),	//size of display area 14
		8,	//spacing between slider and display 15
		CSize(6, 3),	//margin between displaytext and box
		this,	//parent
		RGB(128, 0, 128),	//track color
		RGB(255, 0, 0),		//Arrown Box Color
		RGB(0, 255, 0),		//Arrow Color
		RGB(0, 68, 128),	//Thumb Color
		RGB(255, 255, 255),	//Thumb indicator
		RGB(255, 255, 255),	//Thumb indicator line
		RGB(32, 0, 64),	//background color of slider
		RGB(32, 80, 64),	//text and display rect color
		RGB(255, 128, 192),	//color of the text
		0,	// Minimum Value
		99,	// Maximum Value
		DX7_CONTROL_EG_PITCH_ID_RATE_1,// Control ID
		WM_MYSCROLLBAR_MSG,	//scroll bar message
		0,	//number of bitmaps
		MYOWNSLIDER_STYLE_TEXT | MYOWNSLIDER_STYLE_TICKS,	// Style of slider
		_T("Pitch EG Seg 1 Rate"),	//name of the control
		12	//height of the caption
	);
	//-------------------------------------------------
	m_sliderEGPitchRate_2.Create(	//0->99
		CPoint(DX7_SLIDER_COL_1, 10 + DX7_SLIDER_SPACING),	//origin 1
		16,		//slider height 2
		10,		//slider arrow width 3
		100,	//track width 4
		5,		//track height 5
		10,		//Thumb width 6
		11,		//height of end tics 7
		9,	//height of the middle tick 8
		7,	//major tick marks height 9
		10,	//Increment of Major Ticks 10
		4,	//Tick Height of the other ticks 11
		5,//Spacing between all tics 12
		100 / 5,//Number of ticks marks on scale 13
		CSize(30, 20),	//size of display area 14
		8,	//spacing between slider and display 15
		CSize(6, 3),	//margin between displaytext and box
		this,	//parent
		RGB(128, 0, 128),	//track color
		RGB(255, 0, 0),		//Arrown Box Color
		RGB(0, 255, 0),		//Arrow Color
		RGB(0, 68, 128),	//Thumb Color
		RGB(255, 255, 255),	//Thumb indicator
		RGB(255, 255, 255),	//Thumb indicator line
		RGB(32, 0, 64),	//background color of slider
		RGB(32, 80, 64),	//text and display rect color
		RGB(255, 128, 192),	//color of the text
		0,	// Minimum Value
		99,	// Maximum Value
		DX7_CONTROL_EG_PITCH_ID_RATE_2,// Control ID
		WM_MYSCROLLBAR_MSG,	//scroll bar message
		0,	//number of bitmaps
		MYOWNSLIDER_STYLE_TEXT | MYOWNSLIDER_STYLE_TICKS,	// Style of slider
		_T("   Seg 2 Rate   "),	//name of the control
		12	//height of the caption
	);
	//--------------------------------------------------
	m_sliderEGPitchRate_3.Create(	//0->99
		CPoint(DX7_SLIDER_COL_1, 10 + 2 * DX7_SLIDER_SPACING),	//origin 1
		16,		//slider height 2
		10,		//slider arrow width 3
		100,	//track width 4
		5,		//track height 5
		10,		//Thumb width 6
		11,		//height of end tics 7
		9,	//height of the middle tick 8
		7,	//major tick marks height 9
		10,	//Increment of Major Ticks 10
		4,	//Tick Height of the other ticks 11
		5,//Spacing between all tics 12
		100 / 5,//Number of ticks marks on scale 13
		CSize(30, 20),	//size of display area 14
		8,	//spacing between slider and display 15
		CSize(6, 3),	//margin between displaytext and box
		this,	//parent
		RGB(128, 0, 128),	//track color
		RGB(255, 0, 0),		//Arrown Box Color
		RGB(0, 255, 0),		//Arrow Color
		RGB(0, 68, 128),	//Thumb Color
		RGB(255, 255, 255),	//Thumb indicator
		RGB(255, 255, 255),	//Thumb indicator line
		RGB(32, 0, 64),	//background color of slider
		RGB(32, 80, 64),	//text and display rect color
		RGB(255, 128, 192),	//color of the text
		0,	// Minimum Value
		99,	// Maximum Value
		DX7_CONTROL_EG_PITCH_ID_RATE_3,// Control ID
		WM_MYSCROLLBAR_MSG,	//scroll bar message
		0,	//number of bitmaps
		MYOWNSLIDER_STYLE_TEXT | MYOWNSLIDER_STYLE_TICKS,	// Style of slider
		_T("Pitch EG Seg 3 Rate"),	//name of the control
		12	//height of the caption
	);
	//-----------------------------------------
	m_sliderEGPitchRate_4.Create(	//0->99
		CPoint(DX7_SLIDER_COL_1, 10 + 3 * DX7_SLIDER_SPACING),	//origin 1
		16,		//slider height 2
		10,		//slider arrow width 3
		100,	//track width 4
		5,		//track height 5
		10,		//Thumb width 6
		11,		//height of end tics 7
		9,	//height of the middle tick 8
		7,	//major tick marks height 9
		10,	//Increment of Major Ticks 10
		4,	//Tick Height of the other ticks 11
		5,//Spacing between all tics 12
		100 / 5,//Number of ticks marks on scale 13
		CSize(30, 20),	//size of display area 14
		8,	//spacing between slider and display 15
		CSize(6, 3),	//margin between displaytext and box
		this,	//parent
		RGB(128, 0, 128),	//track color
		RGB(255, 0, 0),		//Arrown Box Color
		RGB(0, 255, 0),		//Arrow Color
		RGB(0, 68, 128),	//Thumb Color
		RGB(255, 255, 255),	//Thumb indicator
		RGB(255, 255, 255),	//Thumb indicator line
		RGB(32, 0, 64),	//background color of slider
		RGB(32, 80, 64),	//text and display rect color
		RGB(255, 128, 192),	//color of the text
		0,	// Minimum Value
		99,	// Maximum Value
		DX7_CONTROL_EG_PITCH_ID_RATE_4,// Control ID
		WM_MYSCROLLBAR_MSG,	//scroll bar message
		0,	//number of bitmaps
		MYOWNSLIDER_STYLE_TEXT | MYOWNSLIDER_STYLE_TICKS,	// Style of slider
		_T("Pitch EG Seg 4 Rate"),	//name of the control
		12	//height of the caption
	);
	//-------------------------------------------------
	m_sliderEGPitchLevel_1.Create(	//0->99
		CPoint(DX7_SLIDER_COL_2, 10),	//origin 1
		16,		//slider height 2
		10,		//slider arrow width 3
		100,	//track width 4
		5,		//track height 5
		10,		//Thumb width 6
		11,		//height of end tics 7
		9,	//height of the middle tick 8
		7,	//major tick marks height 9
		10,	//Increment of Major Ticks 10
		4,	//Tick Height of the other ticks 11
		5,//Spacing between all tics 12
		100 / 5,//Number of ticks marks on scale 13
		CSize(30, 20),	//size of display area 14
		8,	//spacing between slider and display 15
		CSize(6, 3),	//margin between displaytext and box
		this,	//parent
		RGB(128, 0, 128),	//track color
		RGB(255, 0, 0),		//Arrown Box Color
		RGB(0, 255, 0),		//Arrow Color
		RGB(0, 68, 128),	//Thumb Color
		RGB(255, 255, 255),	//Thumb indicator
		RGB(255, 255, 255),	//Thumb indicator line
		RGB(32, 0, 64),	//background color of slider
		RGB(32, 80, 64),	//text and display rect color
		RGB(255, 128, 192),	//color of the text
		0,	// Minimum Value
		99,	// Maximum Value
		DX7_CONTROL_EG_PITCH_ID_LEVEL_1,// Control ID
		WM_MYSCROLLBAR_MSG,	//scroll bar message
		0,	//number of bitmaps
		MYOWNSLIDER_STYLE_TEXT | MYOWNSLIDER_STYLE_TICKS,	// Style of slider
		_T("Pitch EG Seg 1 Level"),	//name of the control
		12	//height of the caption
	);
	//-------------------------------------------
	m_sliderEGPitchLevel_2.Create(	//0->99
		CPoint(DX7_SLIDER_COL_2, 10 + DX7_SLIDER_SPACING),	//origin 1
		16,		//slider height 2
		10,		//slider arrow width 3
		100,	//track width 4
		5,		//track height 5
		10,		//Thumb width 6
		11,		//height of end tics 7
		9,	//height of the middle tick 8
		7,	//major tick marks height 9
		10,	//Increment of Major Ticks 10
		4,	//Tick Height of the other ticks 11
		5,//Spacing between all tics 12
		100 / 5,//Number of ticks marks on scale 13
		CSize(30, 20),	//size of display area 14
		8,	//spacing between slider and display 15
		CSize(6, 3),	//margin between displaytext and box
		this,	//parent
		RGB(128, 0, 128),	//track color
		RGB(255, 0, 0),		//Arrown Box Color
		RGB(0, 255, 0),		//Arrow Color
		RGB(0, 68, 128),	//Thumb Color
		RGB(255, 255, 255),	//Thumb indicator
		RGB(255, 255, 255),	//Thumb indicator line
		RGB(32, 0, 64),	//background color of slider
		RGB(32, 80, 64),	//text and display rect color
		RGB(255, 128, 192),	//color of the text
		0,	// Minimum Value
		99,	// Maximum Value
		DX7_CONTROL_EG_PITCH_ID_LEVEL_2,// Control ID
		WM_MYSCROLLBAR_MSG,	//scroll bar message
		0,	//number of bitmaps
		MYOWNSLIDER_STYLE_TEXT | MYOWNSLIDER_STYLE_TICKS,	// Style of slider
		_T("Pitch EG Seg 2 Level"),	//name of the control
		12	//height of the caption
	);
	//-----------------------------------------
	m_sliderEGPitchLevel_3.Create(	//0->99
		CPoint(DX7_SLIDER_COL_2, 10 + 2 * DX7_SLIDER_SPACING),	//origin 1
		16,		//slider height 2
		10,		//slider arrow width 3
		100,	//track width 4
		5,		//track height 5
		10,		//Thumb width 6
		11,		//height of end tics 7
		9,	//height of the middle tick 8
		7,	//major tick marks height 9
		10,	//Increment of Major Ticks 10
		4,	//Tick Height of the other ticks 11
		5,//Spacing between all tics 12
		100 / 5,//Number of ticks marks on scale 13
		CSize(30, 20),	//size of display area 14
		8,	//spacing between slider and display 15
		CSize(6, 3),	//margin between displaytext and box
		this,	//parent
		RGB(128, 0, 128),	//track color
		RGB(255, 0, 0),		//Arrown Box Color
		RGB(0, 255, 0),		//Arrow Color
		RGB(0, 68, 128),	//Thumb Color
		RGB(255, 255, 255),	//Thumb indicator
		RGB(255, 255, 255),	//Thumb indicator line
		RGB(32, 0, 64),	//background color of slider
		RGB(32, 80, 64),	//text and display rect color
		RGB(255, 128, 192),	//color of the text
		0,	// Minimum Value
		99,	// Maximum Value
		DX7_CONTROL_EG_PITCH_ID_LEVEL_3,// Control ID
		WM_MYSCROLLBAR_MSG,	//scroll bar message
		0,	//number of bitmaps
		MYOWNSLIDER_STYLE_TEXT | MYOWNSLIDER_STYLE_TICKS,	// Style of slider
		_T("Pitch EG Seg 3 Level"),	//name of the control
		12	//height of the caption
	);
	//-----------------------------------------------------
	m_sliderEGPitchLevel_4.Create(	//0->99
		CPoint(DX7_SLIDER_COL_2, 10 + 3 * DX7_SLIDER_SPACING),	//origin 1
		16,		//slider height 2
		10,		//slider arrow width 3
		100,	//track width 4
		5,		//track height 5
		10,		//Thumb width 6
		11,		//height of end tics 7
		9,	//height of the middle tick 8
		7,	//major tick marks height 9
		10,	//Increment of Major Ticks 10
		4,	//Tick Height of the other ticks 11
		5,//Spacing between all tics 12
		100 / 5,//Number of ticks marks on scale 13
		CSize(30, 20),	//size of display area 14
		8,	//spacing between slider and display 15
		CSize(6, 3),	//margin between displaytext and box
		this,	//parent
		RGB(128, 0, 128),	//track color
		RGB(255, 0, 0),		//Arrown Box Color
		RGB(0, 255, 0),		//Arrow Color
		RGB(0, 68, 128),	//Thumb Color
		RGB(255, 255, 255),	//Thumb indicator
		RGB(255, 255, 255),	//Thumb indicator line
		RGB(32, 0, 64),	//background color of slider
		RGB(32, 80, 64),	//text and display rect color
		RGB(255, 128, 192),	//color of the text
		0,	// Minimum Value
		99,	// Maximum Value
		DX7_CONTROL_EG_PITCH_ID_LEVEL_4,// Control ID
		WM_MYSCROLLBAR_MSG,	//scroll bar message
		0,	//number of bitmaps
		MYOWNSLIDER_STYLE_TEXT | MYOWNSLIDER_STYLE_TICKS,	// Style of slider
		_T("Pitch EG Seg 4 Level"),	//name of the control
		12	//height of the caption
	);
	//------------------------------------------
	m_sliderFeedback.Create(	//0->7
		CPoint(DX7_SLIDER_COL_3, 10 + 3 * DX7_SLIDER_SPACING),	//origin 1
		16,		//slider height 2
		10,		//slider arrow width 3
		7 * 5,	//track width 4
		5,		//track height 5
		10,		//Thumb width 6
		11,		//height of end tics 7
		9,	//height of the middle tick 8
		7,	//major tick marks height 9
		10,	//Increment of Major Ticks 10
		4,	//Tick Height of the other ticks 11
		5,//Spacing between all tics 12
		6,//Number of ticks marks on scale 13
		CSize(30, 20),	//size of display area 14
		8,	//spacing between slider and display 15
		CSize(6, 3),	//margin between displaytext and box
		this,	//parent
		RGB(128, 0, 128),	//track color
		RGB(255, 0, 0),		//Arrown Box Color
		RGB(0, 255, 0),		//Arrow Color
		RGB(0, 68, 128),	//Thumb Color
		RGB(255, 255, 255),	//Thumb indicator
		RGB(255, 255, 255),	//Thumb indicator line
		RGB(32, 0, 64),	//background color of slider
		RGB(32, 80, 64),	//text and display rect color
		RGB(255, 128, 192),	//color of the text
		0,	// Minimum Value
		7,	// Maximum Value
		DX7_CONTROL_ID_FEEDBACK,// Control ID
		WM_MYSCROLLBAR_MSG,	//scroll bar message
		0,	//number of bitmaps
		MYOWNSLIDER_STYLE_TEXT | MYOWNSLIDER_STYLE_TICKS,	// Style of slider
		_T("Feedback"),	//name of the control
		12	//height of the caption
	);
	//---------------------------------------------
	m_checkOscillatorKeySync.Create(	//TRUE FALSE
		CString(_T("OSC Key Sync")),	//String to display when checked (TRUE)
		CString(_T("OSC not KSync")),//String to display when unchecked (false)
		CRect(
			CPoint(
				DX7_SLIDER_COL_3, 
				10 + 4 * DX7_SLIDER_SPACING + DX7_CB_CONTROL_VERT_CENTER
			), 
			CSize(
				120, 
				DX7_CB_CONTROL_HEIGHT
			)
		),	//outline rectangle of control
		this,	//parent of the control
		DX7_CONTROL_ID_OSCILLATOR_KEY_SYNC,	//ID of the control
		RGB(92, 0, 69),	// background color
		RGB(92, 255, 69),	//color of the box outline
		RGB(92, 128, 10),//color of the check mark
		RGB(92, 255, 255),	//color of the text
		WM_MYSCROLLBAR_MSG	//message to send back to parent
	);
	//------------------------------------------
	m_sliderLFOSpeed.Create(	//0->99
		CPoint(DX7_SLIDER_COL_1, 10 + 4 * DX7_SLIDER_SPACING),	//origin 1
		16,		//slider height 2
		10,		//slider arrow width 3
		100,	//track width 4
		5,		//track height 5
		10,		//Thumb width 6
		11,		//height of end tics 7
		9,	//height of the middle tick 8
		7,	//major tick marks height 9
		10,	//Increment of Major Ticks 10
		4,	//Tick Height of the other ticks 11
		5,//Spacing between all tics 12
		100 / 5,//Number of ticks marks on scale 13
		CSize(30, 20),	//size of display area 14
		8,	//spacing between slider and display 15
		CSize(6, 3),	//margin between displaytext and box
		this,	//parent
		RGB(128, 0, 128),	//track color
		RGB(255, 0, 0),		//Arrown Box Color
		RGB(0, 255, 0),		//Arrow Color
		RGB(0, 68, 128),	//Thumb Color
		RGB(255, 255, 255),	//Thumb indicator
		RGB(255, 255, 255),	//Thumb indicator line
		RGB(32, 0, 64),	//background color of slider
		RGB(32, 80, 64),	//text and display rect color
		RGB(255, 128, 192),	//color of the text
		0,	// Minimum Value
		99,	// Maximum Value
		DX7_CONTROL_ID_LFO_SPEED,// Control ID
		WM_MYSCROLLBAR_MSG,	//scroll bar message
		0,	//number of bitmaps
		MYOWNSLIDER_STYLE_TEXT | MYOWNSLIDER_STYLE_TICKS,	// Style of slider
		_T("   LFO Speed   "),	//name of the control
		12	//height of the caption
	);
	//--------------------------------------------
	m_sliderLFODelay.Create(	//0->99
		CPoint(DX7_SLIDER_COL_1, 10 + 5 * DX7_SLIDER_SPACING),	//origin 1
		16,		//slider height 2
		10,		//slider arrow width 3
		100,	//track width 4
		5,		//track height 5
		10,		//Thumb width 6
		11,		//height of end tics 7
		9,	//height of the middle tick 8
		7,	//major tick marks height 9
		10,	//Increment of Major Ticks 10
		4,	//Tick Height of the other ticks 11
		5,//Spacing between all tics 12
		100 / 5,//Number of ticks marks on scale 13
		CSize(30, 20),	//size of display area 14
		8,	//spacing between slider and display 15
		CSize(6, 3),	//margin between displaytext and box
		this,	//parent
		RGB(128, 0, 128),	//track color
		RGB(255, 0, 0),		//Arrown Box Color
		RGB(0, 255, 0),		//Arrow Color
		RGB(0, 68, 128),	//Thumb Color
		RGB(255, 255, 255),	//Thumb indicator
		RGB(255, 255, 255),	//Thumb indicator line
		RGB(32, 0, 64),	//background color of slider
		RGB(32, 80, 64),	//text and display rect color
		RGB(255, 128, 192),	//color of the text
		0,	// Minimum Value
		99,	// Maximum Value
		DX7_CONTROL_ID_LFO_DELAY,// Control ID
		WM_MYSCROLLBAR_MSG,	//scroll bar message
		0,	//number of bitmaps
		MYOWNSLIDER_STYLE_TEXT | MYOWNSLIDER_STYLE_TICKS,	// Style of slider
		_T("   LFO Deloay   "),	//name of the control
		12	//height of the caption
	);
	//---------------------------------------------------------
	m_sliderLFOPitchModulationDepth.Create(	//0->99
		CPoint(DX7_SLIDER_COL_1, 10 + 6 * DX7_SLIDER_SPACING),	//origin 1
		16,		//slider height 2
		10,		//slider arrow width 3
		100,	//track width 4
		5,		//track height 5
		10,		//Thumb width 6
		11,		//height of end tics 7
		9,	//height of the middle tick 8
		7,	//major tick marks height 9
		10,	//Increment of Major Ticks 10
		4,	//Tick Height of the other ticks 11
		5,//Spacing between all tics 12
		100 / 5,//Number of ticks marks on scale 13
		CSize(30, 20),	//size of display area 14
		8,	//spacing between slider and display 15
		CSize(6, 3),	//margin between displaytext and box
		this,	//parent
		RGB(128, 0, 128),	//track color
		RGB(255, 0, 0),		//Arrown Box Color
		RGB(0, 255, 0),		//Arrow Color
		RGB(0, 68, 128),	//Thumb Color
		RGB(255, 255, 255),	//Thumb indicator
		RGB(255, 255, 255),	//Thumb indicator line
		RGB(32, 0, 64),	//background color of slider
		RGB(32, 80, 64),	//text and display rect color
		RGB(255, 128, 192),	//color of the text
		0,	// Minimum Value
		99,	// Maximum Value
		DX7_CONTROL_ID_LFO_PITCH_MODULATION_DEPTH,// Control ID
		WM_MYSCROLLBAR_MSG,	//scroll bar message
		0,	//number of bitmaps
		MYOWNSLIDER_STYLE_TEXT | MYOWNSLIDER_STYLE_TICKS,	// Style of slider
		_T("LFO FM Depth"),	//name of the control
		12	//height of the caption
	);
	//--------------------------------------------
	m_sliderLFOAmplitudeModulationDepth.Create(	//0->9
		CPoint(DX7_SLIDER_COL_2, 10 + 6 * DX7_SLIDER_SPACING),	//origin 1
		16,		//slider height 2
		10,		//slider arrow width 3
		100,	//track width 4
		5,		//track height 5
		10,		//Thumb width 6
		11,		//height of end tics 7
		9,	//height of the middle tick 8
		7,	//major tick marks height 9
		10,	//Increment of Major Ticks 10
		4,	//Tick Height of the other ticks 11
		5,//Spacing between all tics 12
		100 / 5,//Number of ticks marks on scale 13
		CSize(30, 20),	//size of display area 14
		8,	//spacing between slider and display 15
		CSize(6, 3),	//margin between displaytext and box
		this,	//parent
		RGB(128, 0, 128),	//track color
		RGB(255, 0, 0),		//Arrown Box Color
		RGB(0, 255, 0),		//Arrow Color
		RGB(0, 68, 128),	//Thumb Color
		RGB(255, 255, 255),	//Thumb indicator
		RGB(255, 255, 255),	//Thumb indicator line
		RGB(32, 0, 64),	//background color of slider
		RGB(32, 80, 64),	//text and display rect color
		RGB(255, 128, 192),	//color of the text
		0,	// Minimum Value
		99,	// Maximum Value
		DX7_CONTROL_ID_LFO_AMPLITUDE_MODULATION_DEPTH,// Control ID
		WM_MYSCROLLBAR_MSG,	//scroll bar message
		0,	//number of bitmaps
		MYOWNSLIDER_STYLE_TEXT | MYOWNSLIDER_STYLE_TICKS,	// Style of slider
		_T("LFO AM Depth"),	//name of the control
		12	//height of the caption
	);
	//---------------------------------------------
	m_checkboxLFOKeySync.Create(		//true false
		CString(_T("LFO Key Sync")),	//String to display when checked (TRUE)
		CString(_T("LFO not K Snnc")),//String to display when unchecked (false)
		CRect(
			CPoint(
				DX7_SLIDER_COL_2, 
				10 + 4 * DX7_SLIDER_SPACING + DX7_CB_CONTROL_VERT_CENTER
			), 
			CSize(
				120, 
				DX7_CB_CONTROL_HEIGHT
			)
		),	//outline rectangle of control
		this,	//parent of the control
		DX7_CONTROL_ID_LFO_KEY_SYNC,	//ID of the control
		RGB(92, 0, 69),	// background color
		RGB(92, 255, 69),	//color of the box outline
		RGB(92, 128, 10),//color of the check mark
		RGB(92, 255, 255),	//color of the text
		WM_MYSCROLLBAR_MSG	//message to send back to parent
	);
	//-------------------------------------------
	m_sliderLFOWaveForm.Create(		// 0->6
		CPoint(DX7_SLIDER_COL_2, 10 + 5 * DX7_SLIDER_SPACING),	//origin 1
		16,		//slider height 2
		10,		//slider arrow width 3
		6 * 5,	//track width 6 positions 5 spacing
		5,		//track height 5
		10,		//Thumb width 6
		10,		//height of end tics 7
		8,	//height of the middle tick 8
		6,	//major tick marks height 9
		5,	//Increment of Ticks 10
		4,	//Tick Height of the other ticks 11
		6,//Spacing between all tics 12
		5,//Number of ticks marks on scale 13
		CSize(20, 20),	//size of display area 14
		8,	//spacing between slider and display 15
		CSize(2, 4),	//margin between displaytext and box
		this,	//parent
		RGB(128, 0, 128),	//track color
		RGB(255, 0, 0),		//Arrown Box Color
		RGB(0, 255, 0),		//Arrow Color
		RGB(0, 68, 128),	//Thumb Color
		RGB(255, 255, 255),	//Thumb indicator
		RGB(255, 255, 255),	//Thumb indicator line
		RGB(32, 0, 64),	//background color of slider
		RGB(32, 80, 64),	//text and display rect color
		RGB(255, 128, 192),	//color of the text
		0,	// Minimum Value
		5,	// Maximum Value
		DX7_CONTROL_ID_LFO_WAVEFORM ,// Control ID
		WM_MYSCROLLBAR_MSG,	//scroll bar message
		6,	//number of bitmaps
		MYOWNSLIDER_STYLE_BITMAP | MYOWNSLIDER_STYLE_TICKS,	// Style of slider
		_T(" LFO Shape"),	//name of the control
		12 //height of the captiojn
	);
	for (int i = 0; i < APP_TX816_NUM_LFO_WAVES; ++i)
	{
		m_sliderLFOWaveForm.AddBitmap(i, GETAPP->bmGetTX816LFOWave(i));
	}
	//--------------------------------------------
	m_sliderLFOPitchModulationSensitivity.Create(	//0->7
		CPoint(DX7_SLIDER_COL_3, 10 + DX7_SLIDER_SPACING ),	//origin 1
		16,		//slider height 2
		10,		//slider arrow width 3
		7 * 5,	//track width 4
		5,		//track height 5
		10,		//Thumb width 6
		11,		//height of end tics 7
		9,	//height of the middle tick 8
		7,	//major tick marks height 9
		5,	//Increment of Major Ticks 10
		4,	//Tick Height of the other ticks 11
		5,//Spacing between all tics 12
		6,//Number of ticks marks on scale 13
		CSize(30, 20),	//size of display area 14
		8,	//spacing between slider and display 15
		CSize(6, 3),	//margin between displaytext and box
		this,	//parent
		RGB(128, 0, 128),	//track color
		RGB(255, 0, 0),		//Arrown Box Color
		RGB(0, 255, 0),		//Arrow Color
		RGB(0, 68, 128),	//Thumb Color
		RGB(255, 255, 255),	//Thumb indicator
		RGB(255, 255, 255),	//Thumb indicator line
		RGB(32, 0, 64),	//background color of slider
		RGB(32, 80, 64),	//text and display rect color
		RGB(255, 128, 192),	//color of the text
		0,	// Minimum Value
		7,	// Maximum Value
		DX7_CONTROL_ID_LFO_PITCH_MODULATION_SENSITIVITY,// Control ID
		WM_MYSCROLLBAR_MSG,	//scroll bar message
		0,	//number of bitmaps
		MYOWNSLIDER_STYLE_TEXT | MYOWNSLIDER_STYLE_TICKS,	// Style of slider
		_T("Pitch Mod Sens"),	//name of the control
		12	//height of the caption
	);
	//------------------------------------------------
	m_sliderTranspose.Create(	//0->48
		CPoint(DX7_SLIDER_COL_3, 10 + 2 * DX7_SLIDER_SPACING),	//origin 1
		16,		//slider height 2
		10,		//slider arrow width 3
		48,		//track width 4
		5,		//track height 5
		10,		//Thumb width 6
		11,		//height of end tics 7
		9,	//height of the middle tick 8
		7,	//major tick marks height 9
		12,	//Increment of Major Ticks 10
		4,	//Tick Height of the other ticks 11
		6,//Spacing between all tics 12
		48 / 6,//Number of ticks marks on scale 13
		CSize(30, 20),	//size of display area 14
		8,	//spacing between slider and display 15
		CSize(6, 3),	//margin between displaytext and box
		this,	//parent
		RGB(128, 0, 128),	//track color
		RGB(255, 0, 0),		//Arrown Box Color
		RGB(0, 255, 0),		//Arrow Color
		RGB(0, 68, 128),	//Thumb Color
		RGB(255, 255, 255),	//Thumb indicator
		RGB(255, 255, 255),	//Thumb indicator line
		RGB(32, 0, 64),	//background color of slider
		RGB(32, 80, 64),	//text and display rect color
		RGB(255, 128, 192),	//color of the text
		0,	// Minimum Value
		48,	// Maximum Value
		DX7_CONTROL_ID_TRANSPOSE,// Control ID
		WM_MYSCROLLBAR_MSG,	//scroll bar message
		0,	//number of bitmaps
		MYOWNSLIDER_STYLE_TEXT | MYOWNSLIDER_STYLE_TICKS,	// Style of slider
		_T("Transpose"),	//name of the control
		12	//height of the caption
	);
	//----------------------------------------------
	EnableCommonControls(0);
}

void CChildViewYamahaTX816::FreqToString(CString& oCS, int coarse, int fine, int mode)
{
	int m;
	double a;

	a = pow(10, 1.0 / 100.0);

	if (mode)	//fixed Freq
	{
		m = coarse % 4;
		switch (m)
		{
		case 0:
			oCS.Format(_T("%4.3lfHz"), pow(a, double(fine)));
			break;
		case 1:
			oCS.Format(_T("%4.2lfHz"), 10.0 * pow(a, double(fine)));
			break;
		case 2:
			oCS.Format(_T("%4.1lfHz"), 100.0 * pow(a, double(fine)));
			break;
		case 3:
			oCS.Format(_T("%4.0lfHz"), pow(a, double(fine)));
			break;
		}
	}
	else   // Ratio
	{
		if (coarse == 0)
			a = 0.5;
		else
			a = double(coarse);
		a = a * (1.0 + double(fine) / 100.0);
		oCS.Format(_T("%5.2lf:1"), a);
	}
}

LRESULT CChildViewYamahaTX816::OnMyOwnScroollbarMessage(WPARAM controlID, LPARAM Value)
{
	switch (controlID)
	{
		//---------- Operator Messages -------------------
	case DX7_CONTROL_ID_EG_SEGMENT_LEVEL_1: 
		m_VoiceEditBuffer.m_Operators[OperatorToIndex(m_DrawMode)].m_EgLevel1 = (unsigned char)Value;
		break;
	case DX7_CONTROL_ID_EG_SEGMENT_LEVEL_2: 
		m_VoiceEditBuffer.m_Operators[OperatorToIndex(m_DrawMode)].m_EgLevel2 = (unsigned char)Value;
		break;
	case DX7_CONTROL_ID_EG_SEGMENT_LEVEL_3: break;
		m_VoiceEditBuffer.m_Operators[OperatorToIndex(m_DrawMode)].m_EgLevel3 = (unsigned char)Value;

	case DX7_CONTROL_ID_EG_SEGMENT_LEVEL_4: 
		m_VoiceEditBuffer.m_Operators[OperatorToIndex(m_DrawMode)].m_EgLevel4 = (unsigned char)Value;
		break;
	case DX7_CONTROL_ID_EG_SEGMENT_RATE_1: 
		m_VoiceEditBuffer.m_Operators[OperatorToIndex(m_DrawMode)].m_EgRate1 = (unsigned char)Value;
		break;
	case DX7_CONTROL_ID_EG_SEGMENT_RATE_2: 
		m_VoiceEditBuffer.m_Operators[OperatorToIndex(m_DrawMode)].m_EgRate2 = (unsigned char)Value;
		break;
	case DX7_CONTROL_ID_EG_SEGMENT_RATE_3: 
		m_VoiceEditBuffer.m_Operators[OperatorToIndex(m_DrawMode)].m_EgRate3 = (unsigned char)Value;
		break;
	case DX7_CONTROL_ID_EG_SEGMENT_RATE_4: 
		m_VoiceEditBuffer.m_Operators[OperatorToIndex(m_DrawMode)].m_EgRate4 = (unsigned char)Value;
		break;
	case DX7_CONTROL_ID_KEYBOARD_LEVEL_SCALING_BREAKPOINT: 
		m_VoiceEditBuffer.m_Operators[OperatorToIndex(m_DrawMode)].m_KeyboardLevelScalingBreakpoint = (unsigned char)Value;
		break;
	case DX7_CONTROL_ID_KEYBOARD_LEVEL_SCALING_LEFT_DEPTH: 
		m_VoiceEditBuffer.m_Operators[OperatorToIndex(m_DrawMode)].m_KeyboardLevelScalingLeftDepth = (unsigned char)Value;
		break;
	case DX7_CONTROL_ID_KEYBOARD_LEVEL_SCALING_RIGHT_DEPTH: 
		m_VoiceEditBuffer.m_Operators[OperatorToIndex(m_DrawMode)].m_KeyboardLevelScalingRightDepth = (unsigned char)Value;
		break;
	case DX7_CONTROL_ID_KEYBOARD_LEVEL_SCALING_LEFT_CURVE: 
		m_VoiceEditBuffer.m_Operators[OperatorToIndex(m_DrawMode)].m_KeyboardLevelScalingLeftCurve = (unsigned char)Value;
		break;
	case DX7_CONTROL_ID_KEYBOARD_LEVEL_SCALING_RIGHT_CURVE: 
		m_VoiceEditBuffer.m_Operators[OperatorToIndex(m_DrawMode)].m_KeyboardLevelScalingLeftCurve = (unsigned char)Value;
		break;
	case DX7_CONTROL_ID_KEYBOARD_RATE_SCALING: 
		m_VoiceEditBuffer.m_Operators[OperatorToIndex(m_DrawMode)].m_KeyboardRateScaling = (unsigned char)Value;
		break;
	case DX7_CONTROL_ID_AMPLITUDE_MODULATION_SENSITIVITY: 
		m_VoiceEditBuffer.m_Operators[OperatorToIndex(m_DrawMode)].m_AmplitudeModulationSensitivity = (unsigned char)Value;
		break;
	case DX7_CONTROL_ID_KEY_VELOCITY_SENSITIVITY: 
		m_VoiceEditBuffer.m_Operators[OperatorToIndex(m_DrawMode)].m_KeyVelocitySensitivity = (unsigned char)Value;
		break;
	case DX7_CONTROL_ID_OPERATOR_OUTPUT_LEVEL: 
		m_VoiceEditBuffer.m_Operators[OperatorToIndex(m_DrawMode)].m_OperatorOutputLevel = (unsigned char)Value;
		break;
	case DX7_CONTROL_ID_OSCILLATOR_MODE: 
		m_VoiceEditBuffer.m_Operators[OperatorToIndex(m_DrawMode)].m_OscillatorMode = (unsigned char)Value;
		break;
	case DX7_CONTROL_ID_OSCILLATOR_FREQUENCY_COARSE: 
		m_VoiceEditBuffer.m_Operators[OperatorToIndex(m_DrawMode)].m_OscillatorFrequencyCoarse = (unsigned char)Value;
		break;
	case DX7_CONTROL_ID_OSCILLATOR_FREQUENCY_FINE: 
		m_VoiceEditBuffer.m_Operators[OperatorToIndex(m_DrawMode)].m_OscillatorFrequencyFine = (unsigned char)Value;
		break;
	case DX7_CONTROL_ID_OSCILLATOR_DETUNE: 
		m_VoiceEditBuffer.m_Operators[OperatorToIndex(m_DrawMode)].m_OscillatorDetune = (unsigned char)Value;
		break;
	//-------------------------
	// operator common control IDs
	//-------------------------
	case DX7_CONTROL_EG_PITCH_ID_RATE_1: 
		m_VoiceEditBuffer.m_CommonOpParams.m_PitchEgRate1 = (unsigned char)Value;
		break;
	case DX7_CONTROL_EG_PITCH_ID_RATE_2: 
		m_VoiceEditBuffer.m_CommonOpParams.m_PitchEgRate2 = (unsigned char)Value;
		break;
	case DX7_CONTROL_EG_PITCH_ID_RATE_3: 
		m_VoiceEditBuffer.m_CommonOpParams.m_PitchEgRate3 = (unsigned char)Value;
		break;
	case DX7_CONTROL_EG_PITCH_ID_RATE_4: 
		m_VoiceEditBuffer.m_CommonOpParams.m_PitchEgRate4 = (unsigned char)Value;
		break;
	case DX7_CONTROL_EG_PITCH_ID_LEVEL_1: 
		m_VoiceEditBuffer.m_CommonOpParams.m_PitchEgRate1 = (unsigned char)Value;
		break;
	case DX7_CONTROL_EG_PITCH_ID_LEVEL_2: 
		m_VoiceEditBuffer.m_CommonOpParams.m_PitchEgRate2 = (unsigned char)Value;
		break;
	case DX7_CONTROL_EG_PITCH_ID_LEVEL_3: 
		m_VoiceEditBuffer.m_CommonOpParams.m_PitchEgRate3 = (unsigned char)Value;
		break;
	case DX7_CONTROL_EG_PITCH_ID_LEVEL_4: 
		m_VoiceEditBuffer.m_CommonOpParams.m_PitchEgRate4 = (unsigned char)Value;
		break;
		//------------------------
	case DX7_CONTROL_ID_ALGORITHM_SELECT: 
		m_VoiceEditBuffer.m_CommonOpParams.m_AlgorithmSelect = (unsigned char)Value;
		break;
	case DX7_CONTROL_ID_FEEDBACK: 
		m_VoiceEditBuffer.m_CommonOpParams.m_Feedback = (unsigned char)Value;
		break;
	case DX7_CONTROL_ID_OSCILLATOR_KEY_SYNC: 
		m_VoiceEditBuffer.m_CommonOpParams.m_OsacillatorKeySync = (unsigned char)Value;
		break;
	case DX7_CONTROL_ID_LFO_SPEED: 
		m_VoiceEditBuffer.m_CommonOpParams.m_LfoSpeed = (unsigned char)Value;
		break;
	case DX7_CONTROL_ID_LFO_DELAY: 
		m_VoiceEditBuffer.m_CommonOpParams.m_LfoDelay = (unsigned char)Value;
		break;
	case DX7_CONTROL_ID_LFO_PITCH_MODULATION_DEPTH: 
		m_VoiceEditBuffer.m_CommonOpParams.m_LfoPitchModulationDepth = (unsigned char)Value;
		break;
	case DX7_CONTROL_ID_LFO_AMPLITUDE_MODULATION_DEPTH: 
		m_VoiceEditBuffer.m_CommonOpParams.m_LfoAmplitudeModulationDepth = (unsigned char)Value;
		break;
	case DX7_CONTROL_ID_LFO_KEY_SYNC: 
		m_VoiceEditBuffer.m_CommonOpParams.m_LfoKeySync = (unsigned char)Value;
		break;
	case DX7_CONTROL_ID_LFO_WAVEFORM: 
		m_VoiceEditBuffer.m_CommonOpParams.m_LfoWave = (unsigned char)Value;
		break;
	case DX7_CONTROL_ID_LFO_PITCH_MODULATION_SENSITIVITY: 
		m_VoiceEditBuffer.m_CommonOpParams.m_LfoPitchModulationSensitivity = (unsigned char)Value;
		break;
	//----------------------------------
	// PERFORMANCE CONTROL IDs
	//----------------------------------
	case DX7_CONTROL_ID_MIDICHAN_SELECT: break;
	case DX7_CONTROL_ID_POLY_MONO: break;

	case DX7_CONTROL_ID_PITCH_BEND_RANGE: break;
	case DX7_CONTROL_ID_PITCH_BEND_STEP: break;

	case DX7_CONTROL_ID_PORTAMENTO_TIME: break;
	case DX7_CONTROL_ID_PORTAMENTO_GLISANDO: break;
	case DX7_CONTROL_ID_PORTAMENTO_MODE: break;

	case DX7_CONTROL_ID_MODULATION_WHEEL_SENSITIVITY: break;
	case DX7_CONTROL_ID_MODULATION_WHEEL_ASSIGN_EGBIAS: break;
	case DX7_CONTROL_ID_MODULATION_WHEEL_ASSIGN_AMPLITUDE: break;
	case DX7_CONTROL_ID_MODULATION_WHEEL_ASSIGN_PITCH: break;

	case DX7_CONTROL_ID_FOOT_CONTROL_SENSITIVITY: break;
	case DX7_CONTROL_ID_FOOT_CONTROL_ASSIGN_EGBIAS: break;
	case DX7_CONTROL_ID_FOOT_CONTROL_ASSIGN_AMPLITUDE: break;
	case DX7_CONTROL_ID_FOOT_CONTROL_ASSIGN_PITCH: break;

	case DX7_CONTROL_ID_AFTER_TOUCH_SENSITIVITY: break;
	case DX7_CONTROL_ID_AFTER_TOUCH_ASSIGN_EGBIAS: break;
	case DX7_CONTROL_ID_AFTER_TOUCH_ASSIGN_AMPLITUDE: break;
	case DX7_CONTROL_ID_AFTER_TOUCH_ASSIGN_PITCH: break;

	case DX7_CONTROL_ID_BREATH_CONTROLLER_SENSITIVITY: break;
	case DX7_CONTROL_ID_BREATH_CONTROLLER_ASSIGN_EGBIAS: break;
	case DX7_CONTROL_ID_BREATH_CONTROLLER_ASSIGN_AMPLITUDE: break;
	case DX7_CONTROL_ID_BREATH_CONTROLLER_ASSIGN_PITCH: break;

	}
	return 0;
}

void CChildViewYamahaTX816::TX816DumpRequst(int dumpType, int channel)
{
	unsigned char* msgBuffer;
	MIDIHDR* midiOutHDR;

	midiOutHDR = new MIDIHDR;
	memset(midiOutHDR, 0, sizeof(MIDIHDR));
	msgBuffer = new unsigned char[DX7_MIDI_SYSEX_DUMPREQ_MESSAGE_SIZE];
	msgBuffer[0] = MIDI_SYSEX;
	msgBuffer[1] = 0x43;	//ID
	msgBuffer[2] = 0x02 | (channel & 0x0f);
	msgBuffer[3] = dumpType;
	msgBuffer[4] = MIDI_SYSEXEND;
	midiOutHDR->dwBufferLength = DX7_MIDI_SYSEX_DUMPREQ_MESSAGE_SIZE;
	midiOutHDR->dwFlags = 0;
	midiOutHDR->lpData = (LPSTR)msgBuffer;
	m_pMidiOut->SendLongMsg(midiOutHDR);
}

void CChildViewYamahaTX816::DrawBMAlg(CDC* pDC, int x, int y)
{
	CDC dcMem;
	CSize csDim;
	
	dcMem.CreateCompatibleDC(pDC);
	dcMem.SelectObject(GETAPP->bmGetTX816AlgBitmap(m_nCurrnetAlg-1));
	csDim = (GETAPP->bmGetTX816AlgBitmap(m_nCurrnetAlg-1))->GetBmDim();
	pDC->BitBlt(x, y, csDim.cx, csDim.cy, &dcMem, 0, 0, SRCCOPY);
}

int CChildViewYamahaTX816::OperatorToIndex(int op)
{
	int rV = 0;
	if ((op >= DX7_DRAWMODE_OPERATOR_1) &&
		(op <= DX7_DRAWMODE_OPERATOR_6))
	{
		rV = DX7_DRAWMODE_OPERATOR_6 - op;
	}
	return rV;
}

void CChildViewYamahaTX816::InitializePerformanceControls()
{
	m_sliderMidiChannelSlect.Create(	// 1->16
		CPoint(DX7_SLIDER_COL_1, DX7_ROW_2),	//origin 1
		16,		//slider height 2
		10,		//slider arrow width 3
		5 * 15,	//track width 4
		5,		//track height 5
		10,		//Thumb width 6
		11,		//height of end tics 7
		9,	//height of the middle tick 8
		7,	//major tick marks height 9
		10,	//Increment of Major Ticks 10
		4,	//Tick Height of the other ticks 11
		5,//Spacing between all tics 12
		15,//Number of ticks marks on scale 13
		CSize(30, 20),	//size of display area 14
		8,	//spacing between slider and display 15
		CSize(6, 3),	//margin between displaytext and box
		this,	//parent
		RGB(128, 0, 128),	//track color
		RGB(255, 0, 0),		//Arrown Box Color
		RGB(0, 255, 0),		//Arrow Color
		RGB(0, 68, 128),	//Thumb Color
		RGB(255, 255, 255),	//Thumb indicator
		RGB(255, 255, 255),	//Thumb indicator line
		RGB(32, 0, 64),	//background color of slider
		RGB(32, 80, 64),	//text and display rect color
		RGB(255, 128, 192),	//color of the text
		1,	// Minimum Value
		16,	// Maximum Value
		DX7_CONTROL_ID_MIDICHAN_SELECT,// Control ID
		WM_MYSCROLLBAR_MSG,	//scroll bar message
		0,	//number of bitmaps
		MYOWNSLIDER_STYLE_TEXT | MYOWNSLIDER_STYLE_TICKS,	// Style of slider
		_T("Midi Channel"),	//name of the control
		12	//height of the caption
	);
	//-------------------------------------------------
	m_checkPolyMono.Create(	// mono poly
		CString(_T("Poly")),	//String to display when checked (TRUE)
		CString(_T("Mono")),//String to display when unchecked (false)
		CRect(CPoint(DX7_SLIDER_COL_1, DX7_ROW_3), CSize(80, DX7_CB_CONTROL_HEIGHT)),	//outline rectangle of control
		this,	//parent of the control
		DX7_CONTROL_ID_POLY_MONO,	//ID of the control
		RGB(92, 0, 69),	// background color
		RGB(92, 255, 69),	//color of the box outline
		RGB(92, 128, 10),//color of the check mark
		RGB(92, 255, 255),	//color of the text
		WM_MYSCROLLBAR_MSG	//message to send back to parent
	);
	//------------------ Pitch Bend ------------------------
	m_sliderPitchBendRange.Create(	//0->12
		CPoint(DX7_SLIDER_COL_3, DX7_ROW_1),	//origin 1
		16,		//slider height 2
		10,		//slider arrow width 3
		5 * 12,	//track width 4
		5,		//track height 5
		10,		//Thumb width 6
		11,		//height of end tics 7
		9,	//height of the middle tick 8
		7,	//major tick marks height 9
		10,	//Increment of Major Ticks 10
		4,	//Tick Height of the other ticks 11
		5,//Spacing between all tics 12
		12,//Number of ticks marks on scale 13
		CSize(30, 20),	//size of display area 14
		8,	//spacing between slider and display 15
		CSize(6, 3),	//margin between displaytext and box
		this,	//parent
		RGB(128, 0, 128),	//track color
		RGB(255, 0, 0),		//Arrown Box Color
		RGB(0, 255, 0),		//Arrow Color
		RGB(0, 68, 128),	//Thumb Color
		RGB(255, 255, 255),	//Thumb indicator
		RGB(255, 255, 255),	//Thumb indicator line
		RGB(32, 0, 64),	//background color of slider
		RGB(32, 80, 64),	//text and display rect color
		RGB(255, 128, 192),	//color of the text
		0,	// Minimum Value
		12,	// Maximum Value
		DX7_CONTROL_ID_PITCH_BEND_RANGE,// Control ID
		WM_MYSCROLLBAR_MSG,	//scroll bar message
		0,	//number of bitmaps
		MYOWNSLIDER_STYLE_TEXT | MYOWNSLIDER_STYLE_TICKS,	// Style of slider
		_T("Pitch Bend Range"),	//name of the control
		12	//height of the caption
	);
	//------------------------------------------------------
	m_sliderPitchBendStep.Create(		//0->12
		CPoint(DX7_SLIDER_COL_3, DX7_ROW_2),	//origin 1
		16,		//slider height 2
		10,		//slider arrow width 3
		5 * 12,	//track width 4
		5,		//track height 5
		10,		//Thumb width 6
		11,		//height of end tics 7
		9,	//height of the middle tick 8
		7,	//major tick marks height 9
		10,	//Increment of Major Ticks 10
		4,	//Tick Height of the other ticks 11
		5,//Spacing between all tics 12
		12,//Number of ticks marks on scale 13
		CSize(30, 20),	//size of display area 14
		8,	//spacing between slider and display 15
		CSize(6, 3),	//margin between displaytext and box
		this,	//parent
		RGB(128, 0, 128),	//track color
		RGB(255, 0, 0),		//Arrown Box Color
		RGB(0, 255, 0),		//Arrow Color
		RGB(0, 68, 128),	//Thumb Color
		RGB(255, 255, 255),	//Thumb indicator
		RGB(255, 255, 255),	//Thumb indicator line
		RGB(32, 0, 64),	//background color of slider
		RGB(32, 80, 64),	//text and display rect color
		RGB(255, 128, 192),	//color of the text
		0,	// Minimum Value
		12,	// Maximum Value
		DX7_CONTROL_ID_PITCH_BEND_STEP,// Control ID
		WM_MYSCROLLBAR_MSG,	//scroll bar message
		0,	//number of bitmaps
		MYOWNSLIDER_STYLE_TEXT | MYOWNSLIDER_STYLE_TICKS,	// Style of slider
		_T("Pitch Bend Step"),	//name of the control
		12	//height of the caption
	);
	//-------------- Portamento -------------------------
	m_sliderPortamentoTime.Create(	//0->99
		CPoint(DX7_SLIDER_COL_3, DX7_ROW_5),	//origin 1
		16,		//slider height 2
		10,		//slider arrow width 3
		100,	//track width 4
		5,		//track height 5
		10,		//Thumb width 6
		11,		//height of end tics 7
		9,	//height of the middle tick 8
		7,	//major tick marks height 9
		10,	//Increment of Major Ticks 10
		4,	//Tick Height of the other ticks 11
		5,//Spacing between all tics 12
		100 / 5,//Number of ticks marks on scale 13
		CSize(30, 20),	//size of display area 14
		8,	//spacing between slider and display 15
		CSize(6, 3),	//margin between displaytext and box
		this,	//parent
		RGB(128, 0, 128),	//track color
		RGB(255, 0, 0),		//Arrown Box Color
		RGB(0, 255, 0),		//Arrow Color
		RGB(0, 68, 128),	//Thumb Color
		RGB(255, 255, 255),	//Thumb indicator
		RGB(255, 255, 255),	//Thumb indicator line
		RGB(32, 0, 64),	//background color of slider
		RGB(32, 80, 64),	//text and display rect color
		RGB(255, 128, 192),	//color of the text
		0,	// Minimum Value
		99,	// Maximum Value
		DX7_CONTROL_ID_PORTAMENTO_TIME,// Control ID
		WM_MYSCROLLBAR_MSG,	//scroll bar message
		0,	//number of bitmaps
		MYOWNSLIDER_STYLE_TEXT | MYOWNSLIDER_STYLE_TICKS,	// Style of slider
		_T("Portamento"),	//name of the control
		12	//height of the caption
	);
	//------------------------------------------------------
	m_checkPortamentoGlisando.Create(	//on-off
		CString(_T("Glisando")),	//String to display when checked (TRUE)
		CString(_T("Portamento")),//String to display when unchecked (false)
		CRect(CPoint(DX7_SLIDER_COL_3, DX7_ROW_6), CSize(100, DX7_CB_CONTROL_HEIGHT)),	//outline rectangle of control
		this,	//parent of the control
		DX7_CONTROL_ID_PORTAMENTO_GLISANDO,	//ID of the control
		RGB(92, 0, 69),	// background color
		RGB(92, 255, 69),	//color of the box outline
		RGB(92, 128, 10),//color of the check mark
		RGB(92, 255, 255),	//color of the text
		WM_MYSCROLLBAR_MSG	//message to send back to parent
	);
	//----------------------------------------------------------
	m_checkPortamentoMode.Create(		//retain follow
		CString(_T("Pitch Follow")),	//String to display when checked (TRUE)
		CString(_T("Pitch Relative")),//String to display when unchecked (false)
		CRect(CPoint(DX7_SLIDER_COL_3, DX7_ROW_7), CSize(100, DX7_CB_CONTROL_HEIGHT)),	//outline rectangle of control
		this,	//parent of the control
		DX7_CONTROL_ID_PORTAMENTO_MODE,	//ID of the control
		RGB(92, 0, 69),	// background color
		RGB(92, 255, 69),	//color of the box outline
		RGB(92, 128, 10),//color of the check mark
		RGB(92, 255, 255),	//color of the text
		WM_MYSCROLLBAR_MSG	//message to send back to parent
	);
	//-------------- Modulation Wheel ----------------
	m_sliderModulationWheelSensitivity.Create(	//0->15
		CPoint(DX7_SLIDER_COL_1, DX7_ROW_4),	//origin 1
		16,		//slider height 2
		10,		//slider arrow width 3
		5 * 15,	//track width 4
		5,		//track height 5
		10,		//Thumb width 6
		11,		//height of end tics 7
		9,	//height of the middle tick 8
		7,	//major tick marks height 9
		10,	//Increment of Major Ticks 10
		4,	//Tick Height of the other ticks 11
		5,//Spacing between all tics 12
		14,//Number of ticks marks on scale 13
		CSize(30, 20),	//size of display area 14
		8,	//spacing between slider and display 15
		CSize(6, 3),	//margin between displaytext and box
		this,	//parent
		RGB(128, 0, 128),	//track color
		RGB(255, 0, 0),		//Arrown Box Color
		RGB(0, 255, 0),		//Arrow Color
		RGB(0, 68, 128),	//Thumb Color
		RGB(255, 255, 255),	//Thumb indicator
		RGB(255, 255, 255),	//Thumb indicator line
		RGB(32, 0, 64),	//background color of slider
		RGB(32, 80, 64),	//text and display rect color
		RGB(255, 128, 192),	//color of the text
		0,	// Minimum Value
		15,	// Maximum Value
		DX7_CONTROL_ID_MODULATION_WHEEL_SENSITIVITY,// Control ID
		WM_MYSCROLLBAR_MSG,	//scroll bar message
		0,	//number of bitmaps
		MYOWNSLIDER_STYLE_TEXT | MYOWNSLIDER_STYLE_TICKS,	// Style of slider
		_T("Mod Wheel Sens"),	//name of the control
		12	//height of the caption
	);
	//---------------------------------------------------------
	m_checkModulationWheelAssignEGBias.Create(	//on-off
		CString(_T("")),	//String to display when checked (TRUE)
		CString(_T("")),//String to display when unchecked (false)
		CRect(CPoint(DX7_SLIDER_COL_2 + DX7_CB_EG_BIAS, DX7_ROW_4), CSize(DX7_CB_NL_CONTROL_WIDTH, DX7_CB_CONTROL_HEIGHT)),	//outline rectangle of control
		this,	//parent of the control
		DX7_CONTROL_ID_MODULATION_WHEEL_ASSIGN_EGBIAS,	//ID of the control
		RGB(92, 0, 69),	// background color
		RGB(92, 255, 69),	//color of the box outline
		RGB(92, 128, 10),//color of the check mark
		RGB(92, 255, 255),	//color of the text
		WM_MYSCROLLBAR_MSG	//message to send back to parent
	);
	//-----------------------------------------------------
	m_checkModulationWheelAssignAmplitude.Create(//on-off
		CString(_T("")),	//String to display when checked (TRUE)
		CString(_T("")),//String to display when unchecked (false)
		CRect(CPoint(DX7_SLIDER_COL_2 + DX7_CB_AMPLITUDE, DX7_ROW_4), CSize(DX7_CB_NL_CONTROL_WIDTH, DX7_CB_CONTROL_HEIGHT)),	//outline rectangle of control
		this,	//parent of the control
		DX7_CONTROL_ID_MODULATION_WHEEL_ASSIGN_AMPLITUDE,	//ID of the control
		RGB(92, 0, 69),	// background color
		RGB(92, 255, 69),	//color of the box outline
		RGB(92, 128, 10),//color of the check mark
		RGB(92, 255, 255),	//color of the text
		WM_MYSCROLLBAR_MSG	//message to send back to parent
	);
	//------------------------------------------------------
	m_checkModulationWheelAssignPitch.Create(	//on-off
		CString(_T("")),	//String to display when checked (TRUE)
		CString(_T("")),//String to display when unchecked (false)
		CRect(CPoint(DX7_SLIDER_COL_2 + DX7_CB_PITCH, DX7_ROW_4), CSize(DX7_CB_NL_CONTROL_WIDTH, DX7_CB_CONTROL_HEIGHT)),	//outline rectangle of control
		this,	//parent of the control
		DX7_CONTROL_ID_MODULATION_WHEEL_ASSIGN_PITCH,	//ID of the control
		RGB(92, 0, 69),	// background color
		RGB(92, 255, 69),	//color of the box outline
		RGB(92, 128, 10),//color of the check mark
		RGB(92, 255, 255),	//color of the text
		WM_MYSCROLLBAR_MSG	//message to send back to parent
	);
	//----------------- Foot Controller ---------------
	m_sliderFootControllerSensitivity.Create(	//0->15
		CPoint(DX7_SLIDER_COL_1, DX7_ROW_5),	//origin 1
		16,		//slider height 2
		10,		//slider arrow width 3
		5 * 15,	//track width 4
		5,		//track height 5
		10,		//Thumb width 6
		11,		//height of end tics 7
		9,	//height of the middle tick 8
		7,	//major tick marks height 9
		10,	//Increment of Major Ticks 10
		4,	//Tick Height of the other ticks 11
		5,//Spacing between all tics 12
		14,//Number of ticks marks on scale 13
		CSize(30, 20),	//size of display area 14
		8,	//spacing between slider and display 15
		CSize(6, 3),	//margin between displaytext and box
		this,	//parent
		RGB(128, 0, 128),	//track color
		RGB(255, 0, 0),		//Arrown Box Color
		RGB(0, 255, 0),		//Arrow Color
		RGB(0, 68, 128),	//Thumb Color
		RGB(255, 255, 255),	//Thumb indicator
		RGB(255, 255, 255),	//Thumb indicator line
		RGB(32, 0, 64),	//background color of slider
		RGB(32, 80, 64),	//text and display rect color
		RGB(255, 128, 192),	//color of the text
		0,	// Minimum Value
		15,	// Maximum Value
		DX7_CONTROL_ID_FOOT_CONTROL_SENSITIVITY,// Control ID
		WM_MYSCROLLBAR_MSG,	//scroll bar message
		0,	//number of bitmaps
		MYOWNSLIDER_STYLE_TEXT | MYOWNSLIDER_STYLE_TICKS,	// Style of slider
		_T("Foot Control"),	//name of the control
		12	//height of the caption
	);
	//----------------------------------------------------
	m_checkFootControllerAssignEGBias.Create(	//on-off
		CString(_T("")),	//String to display when checked (TRUE)
		CString(_T("")),//String to display when unchecked (false)
		CRect(CPoint(DX7_SLIDER_COL_2 + DX7_CB_EG_BIAS, DX7_ROW_5), CSize(DX7_CB_NL_CONTROL_WIDTH, DX7_CB_CONTROL_HEIGHT)),	//outline rectangle of control
		this,	//parent of the control
		DX7_CONTROL_ID_FOOT_CONTROL_ASSIGN_EGBIAS,	//ID of the control
		RGB(92, 0, 69),	// background color
		RGB(92, 255, 69),	//color of the box outline
		RGB(92, 128, 10),//color of the check mark
		RGB(92, 255, 255),	//color of the text
		WM_MYSCROLLBAR_MSG	//message to send back to parent
	);
	//-------------------------------------------------------
	m_checkFootControllerAssignAmplitude.Create(	//on-off
		CString(_T("")),	//String to display when checked (TRUE)
		CString(_T("")),//String to display when unchecked (false)
		CRect(CPoint(DX7_SLIDER_COL_2 + DX7_CB_AMPLITUDE, DX7_ROW_5), CSize(DX7_CB_NL_CONTROL_WIDTH, DX7_CB_CONTROL_HEIGHT)),	//outline rectangle of control
		this,	//parent of the control
		DX7_CONTROL_ID_FOOT_CONTROL_ASSIGN_AMPLITUDE,	//ID of the control
		RGB(92, 0, 69),	// background color
		RGB(92, 255, 69),	//color of the box outline
		RGB(92, 128, 10),//color of the check mark
		RGB(92, 255, 255),	//color of the text
		WM_MYSCROLLBAR_MSG	//message to send back to parent
	);
	//-----------------------------------------------------
	m_checkFootControllerAssignPitch.Create(	//on-off
		CString(_T("")),	//String to display when checked (TRUE)
		CString(_T("")),//String to display when unchecked (false)
		CRect(CPoint(DX7_SLIDER_COL_2 + DX7_CB_PITCH, DX7_ROW_5), CSize(DX7_CB_NL_CONTROL_WIDTH, DX7_CB_CONTROL_HEIGHT)),	//outline rectangle of control
		this,	//parent of the control
		DX7_CONTROL_ID_FOOT_CONTROL_ASSIGN_PITCH,	//ID of the control
		RGB(92, 0, 69),	// background color
		RGB(92, 255, 69),	//color of the box outline
		RGB(92, 128, 10),//color of the check mark
		RGB(92, 255, 255),	//color of the text
		WM_MYSCROLLBAR_MSG	//message to send back to parent
	);
	//--------------------- After Touch ----------------
	m_sliderAfterTouchSensitivity.Create(	//0->15
		CPoint(DX7_SLIDER_COL_1,DX7_ROW_6),	//origin 1
		16,		//slider height 2
		10,		//slider arrow width 3
		5 * 15,	//track width 4
		5,		//track height 5
		10,		//Thumb width 6
		11,		//height of end tics 7
		9,	//height of the middle tick 8
		7,	//major tick marks height 9
		10,	//Increment of Major Ticks 10
		4,	//Tick Height of the other ticks 11
		5,//Spacing between all tics 12
		14,//Number of ticks marks on scale 13
		CSize(30, 20),	//size of display area 14
		8,	//spacing between slider and display 15
		CSize(6, 3),	//margin between displaytext and box
		this,	//parent
		RGB(128, 0, 128),	//track color
		RGB(255, 0, 0),		//Arrown Box Color
		RGB(0, 255, 0),		//Arrow Color
		RGB(0, 68, 128),	//Thumb Color
		RGB(255, 255, 255),	//Thumb indicator
		RGB(255, 255, 255),	//Thumb indicator line
		RGB(32, 0, 64),	//background color of slider
		RGB(32, 80, 64),	//text and display rect color
		RGB(255, 128, 192),	//color of the text
		0,	// Minimum Value
		15,	// Maximum Value
		DX7_CONTROL_ID_AFTER_TOUCH_SENSITIVITY,// Control ID
		WM_MYSCROLLBAR_MSG,	//scroll bar message
		0,	//number of bitmaps
		MYOWNSLIDER_STYLE_TEXT | MYOWNSLIDER_STYLE_TICKS,	// Style of slider
		_T("After Touch Sens"),	//name of the control
		12	//height of the caption
	);
	//---------------------------------------------------
	m_checkAfterTouchAssignEGBias.Create(	//on-off
		CString(_T("")),	//String to display when checked (TRUE)
		CString(_T("")),//String to display when unchecked (false)
		CRect(CPoint(DX7_SLIDER_COL_2 + DX7_CB_EG_BIAS, DX7_ROW_6), CSize(DX7_CB_NL_CONTROL_WIDTH, DX7_CB_CONTROL_HEIGHT)),	//outline rectangle of control
		this,	//parent of the control
		DX7_CONTROL_ID_AFTER_TOUCH_ASSIGN_EGBIAS,	//ID of the control
		RGB(92, 0, 69),	// background color
		RGB(92, 255, 69),	//color of the box outline
		RGB(92, 128, 10),//color of the check mark
		RGB(92, 255, 255),	//color of the text
		WM_MYSCROLLBAR_MSG	//message to send back to parent
	);
	//-----------------------------------------------------
	m_checkAfterTouchAssignAmplitude.Create(	//on-off
		CString(_T("")),	//String to display when checked (TRUE)
		CString(_T("")),//String to display when unchecked (false)
		CRect(CPoint(DX7_SLIDER_COL_2 + DX7_CB_AMPLITUDE, DX7_ROW_6), CSize(DX7_CB_NL_CONTROL_WIDTH, DX7_CB_CONTROL_HEIGHT)),	//outline rectangle of control
		this,	//parent of the control
		DX7_CONTROL_ID_AFTER_TOUCH_ASSIGN_AMPLITUDE,	//ID of the control
		RGB(92, 0, 69),	// background color
		RGB(92, 255, 69),	//color of the box outline
		RGB(92, 128, 10),//color of the check mark
		RGB(92, 255, 255),	//color of the text
		WM_MYSCROLLBAR_MSG	//message to send back to parent
	);
	//-----------------------------------------------------
	m_checkAfterTouchAssignPitch.Create(	//on-off
		CString(_T("")),	//String to display when checked (TRUE)
		CString(_T("")),//String to display when unchecked (false)
		CRect(CPoint(DX7_SLIDER_COL_2 + DX7_CB_PITCH, DX7_ROW_6), CSize(DX7_CB_NL_CONTROL_WIDTH, DX7_CB_CONTROL_HEIGHT)),	//outline rectangle of control
		this,	//parent of the control
		DX7_CONTROL_ID_AFTER_TOUCH_ASSIGN_PITCH,	//ID of the control
		RGB(92, 0, 69),	// background color
		RGB(92, 255, 69),	//color of the box outline
		RGB(92, 128, 10),//color of the check mark
		RGB(92, 255, 255),	//color of the text
		WM_MYSCROLLBAR_MSG	//message to send back to parent
	);
	//--------------------- Breath Controller ------------------------
	m_sliderBreathControllerSensitivity.Create(	//0->15
		CPoint(DX7_SLIDER_COL_1, DX7_ROW_7),	//origin 1
		16,		//slider height 2
		10,		//slider arrow width 3
		15 * 5,	//track width 4
		5,		//track height 5
		10,		//Thumb width 6
		11,		//height of end tics 7
		9,	//height of the middle tick 8
		7,	//major tick marks height 9
		10,	//Increment of Major Ticks 10
		4,	//Tick Height of the other ticks 11
		5,//Spacing between all tics 12
		14,//Number of ticks marks on scale 13
		CSize(30, 20),	//size of display area 14
		8,	//spacing between slider and display 15
		CSize(6, 3),	//margin between displaytext and box
		this,	//parent
		RGB(128, 0, 128),	//track color
		RGB(255, 0, 0),		//Arrown Box Color
		RGB(0, 255, 0),		//Arrow Color
		RGB(0, 68, 128),	//Thumb Color
		RGB(255, 255, 255),	//Thumb indicator
		RGB(255, 255, 255),	//Thumb indicator line
		RGB(32, 0, 64),	//background color of slider
		RGB(32, 80, 64),	//text and display rect color
		RGB(255, 128, 192),	//color of the text
		0,	// Minimum Value
		15,	// Maximum Value
		DX7_CONTROL_ID_BREATH_CONTROLLER_SENSITIVITY,// Control ID
		WM_MYSCROLLBAR_MSG,	//scroll bar message
		0,	//number of bitmaps
		MYOWNSLIDER_STYLE_TEXT | MYOWNSLIDER_STYLE_TICKS,	// Style of slider
		_T("Breath Ctlr"),	//name of the control
		12	//height of the caption
	);
	//------------------------------------------------------------
	m_checkBreathControllerAssignEGBias.Create(	//on-off
		CString(_T("")),	//String to display when checked (TRUE)
		CString(_T("")),//String to display when unchecked (false)
		CRect(CPoint(DX7_SLIDER_COL_2 + DX7_CB_EG_BIAS, DX7_ROW_7), CSize(DX7_CB_NL_CONTROL_WIDTH, DX7_CB_CONTROL_HEIGHT)),	//outline rectangle of control
		this,	//parent of the control
		DX7_CONTROL_ID_BREATH_CONTROLLER_ASSIGN_EGBIAS,	//ID of the control
		RGB(92, 0, 69),	// background color
		RGB(92, 255, 69),	//color of the box outline
		RGB(92, 128, 10),//color of the check mark
		RGB(92, 255, 255),	//color of the text
		WM_MYSCROLLBAR_MSG	//message to send back to parent
	);
	//-----------------------------------------------------------
	m_checkBreathControllerAssignAmplitude.Create(	//on-off
		CString(_T("")),	//String to display when checked (TRUE)
		CString(_T("")),//String to display when unchecked (false)
		CRect(CPoint(DX7_SLIDER_COL_2 + DX7_CB_AMPLITUDE, DX7_ROW_7), CSize(DX7_CB_NL_CONTROL_WIDTH, DX7_CB_CONTROL_HEIGHT)),	//outline rectangle of control
		this,	//parent of the control
		DX7_CONTROL_ID_BREATH_CONTROLLER_ASSIGN_AMPLITUDE,	//ID of the control
		RGB(92, 0, 69),	// background color
		RGB(92, 255, 69),	//color of the box outline
		RGB(92, 128, 10),//color of the check mark
		RGB(92, 255, 255),	//color of the text
		WM_MYSCROLLBAR_MSG	//message to send back to parent
	);
	//---------------------------------------------------------
	m_checkBreathControllerAssignPitch.Create(	//on-off
		CString(_T("")),	//String to display when checked (TRUE)
		CString(_T("")),//String to display when unchecked (false)
		CRect(CPoint(DX7_SLIDER_COL_2 + DX7_CB_PITCH, DX7_ROW_7), CSize(DX7_CB_NL_CONTROL_WIDTH, DX7_CB_CONTROL_HEIGHT)),	//outline rectangle of control
		this,	//parent of the control
		DX7_CONTROL_ID_BREATH_CONTROLLER_ASSIGN_PITCH,	//ID of the control
		RGB(92, 0, 69),	// background color
		RGB(92, 255, 69),	//color of the box outline
		RGB(92, 128, 10),//color of the check mark
		RGB(92, 255, 255),	//color of the text
		WM_MYSCROLLBAR_MSG	//message to send back to parent
	);
	//--------- Master Tuning -------------------
	m_sliderMasterTuning.Create(	//0->127
		CPoint(DX7_SLIDER_COL_1, DX7_ROW_1),	//origin 1
		16,		//slider height 2
		10,		//slider arrow width 3
		128,	//track width 4
		5,		//track height 5
		10,		//Thumb width 6
		11,		//height of end tics 7
		9,	//height of the middle tick 8
		7,	//major tick marks height 9
		16,	//Increment of Major Ticks 10
		4,	//Tick Height of the other ticks 11
		8,//Spacing between all tics 12
		128 / 8,//Number of ticks marks on scale 13
		CSize(40, 20),	//size of display area 14
		8,	//spacing between slider and display 15
		CSize(6, 3),	//margin between displaytext and box
		this,	//parent
		RGB(128, 0, 128),	//track color
		RGB(255, 0, 0),		//Arrown Box Color
		RGB(0, 255, 0),		//Arrow Color
		RGB(0, 68, 128),	//Thumb Color
		RGB(255, 255, 255),	//Thumb indicator
		RGB(255, 255, 255),	//Thumb indicator line
		RGB(32, 0, 64),	//background color of slider
		RGB(32, 80, 64),	//text and display rect color
		RGB(255, 128, 192),	//color of the text
		0,	// Minimum Value
		127,	// Maximum Value
		DX7_CONTROL_ID_MASTER_TUNING,// Control ID
		WM_MYSCROLLBAR_MSG,	//scroll bar message
		0,	//number of bitmaps
		MYOWNSLIDER_STYLE_TEXT | MYOWNSLIDER_STYLE_TICKS,	// Style of slider
		_T("Master Tuning"),	//name of the control
		12,	//height of the caption
		64	// display offset 64 => Concert Pitch <0>
	);
	EnablePerformanceControls(0);
}

void CChildViewYamahaTX816::SetOperatorValues(int opIndex)
{
	m_sliderEGSeg1Rate.SetValue(m_VoiceEditBuffer.m_Operators[opIndex].m_EgRate1);
	m_sliderEGSeg2Rate.SetValue(m_VoiceEditBuffer.m_Operators[opIndex].m_EgRate2);
	m_sliderEGSeg3Rate.SetValue(m_VoiceEditBuffer.m_Operators[opIndex].m_EgRate3);
	m_sliderEGSeg4Rate.SetValue(m_VoiceEditBuffer.m_Operators[opIndex].m_EgRate4);
	m_sliderEGSeg1Level.SetValue(m_VoiceEditBuffer.m_Operators[opIndex].m_EgLevel1);
	m_sliderEGSeg2Level.SetValue(m_VoiceEditBuffer.m_Operators[opIndex].m_EgLevel2);
	m_sliderEGSeg3Level.SetValue(m_VoiceEditBuffer.m_Operators[opIndex].m_EgLevel3);
	m_sliderEGSeg4Level.SetValue(m_VoiceEditBuffer.m_Operators[opIndex].m_EgLevel4);
	m_sliderKeyboardLevelScalingBreakPoint.SetValue(m_VoiceEditBuffer.m_Operators[opIndex].m_KeyboardLevelScalingBreakpoint);
	m_sliderKeyboardLevelScalingLeftDepth.SetValue(m_VoiceEditBuffer.m_Operators[opIndex].m_KeyboardLevelScalingLeftDepth);
	m_sliderKeyboardLevelScalingRightDepth.SetValue(m_VoiceEditBuffer.m_Operators[opIndex].m_KeyboardLevelScalingRightDepth);
	m_sliderKeyboardLevelScalingLeftCurve.SetValue(m_VoiceEditBuffer.m_Operators[opIndex].m_KeyboardLevelScalingLeftCurve);
	m_sliderKeyboardLevelScalingRightCurve.SetValue(m_VoiceEditBuffer.m_Operators[opIndex].m_KeyboardLevelScalingRightCurve);
	m_sliderKeyboardRateScaling.SetValue(m_VoiceEditBuffer.m_Operators[opIndex].m_KeyboardRateScaling);
	m_sliderAmplitudeModulationSensitivity.SetValue(m_VoiceEditBuffer.m_Operators[opIndex].m_AmplitudeModulationSensitivity);
	m_sliderKeyVelocitySensitivity.SetValue(m_VoiceEditBuffer.m_Operators[opIndex].m_KeyVelocitySensitivity);
	m_sliderOscilatorFrequencyFine.SetValue(m_VoiceEditBuffer.m_Operators[opIndex].m_OscillatorFrequencyFine);
	m_sliderOscilatorFrequencyCoarsep.SetValue(m_VoiceEditBuffer.m_Operators[opIndex].m_OscillatorFrequencyCoarse);
	m_sliderOutputLevel.SetValue(m_VoiceEditBuffer.m_Operators[opIndex].m_OperatorOutputLevel);
	m_checkboxOscillatorMode.SetCheck(m_VoiceEditBuffer.m_Operators[opIndex].m_OscillatorMode);
}